/*
  Author: Josef21296

  Sketch to control a LED matrix with an arduino to display diferent images and simple animations.
  Using FastLED library to control the WS2812 LED Strips.

*/

// Library to use Flash memory in order to store more images
#include <avr/pgmspace.h>
// FastLED library include 
#include <FastLED.h>

// Number of leds
#define LEDS_W 16
#define LEDS_H 16
#define NUM_LEDS LEDS_W * LEDS_H

// LEDs brightness
#define DEFAULT_BRIGHTNESS 15

#define MIN_BRIGHT 0.01 * 255 // 1% of bright
#define MAX_BRIGHT 0.35 * 255 // 35% of bright

// Leds data pin
#define DATA_PIN 6
#define BRIGHT_PIN A1
#define DYNAMIC_PIN 2

// LEDs object
CRGB leds[NUM_LEDS];

// ==== Frames ====================================================

// UnicornFull
const long UnicornFull_00[] PROGMEM = 
{
  0x787878, 0x787878, 0x787878, 0x787878, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x787878, 0x787878, 0x787878, 0x787878, 0x787878, 0x787878, 0x787878, 
  0x787878, 0x787878, 0x787878, 0x787878, 0x787878, 0x787878, 0x000000, 0xFFFFFF, 0xE22CCB, 0xE22CCB, 0xE22CCB, 0xE22CCB, 0x787878, 0x000000, 0x000000, 0x000000, 
  0xF1691C, 0xF1691C, 0x000000, 0x000000, 0x000000, 0xE22CCB, 0xE22CCB, 0xFFFFFF, 0xFFFFFF, 0xFFF000, 0x000000, 0x787878, 0x787878, 0x787878, 0x787878, 0x787878, 
  0x787878, 0x787878, 0x787878, 0x787878, 0x000000, 0xFFF000, 0xFFF000, 0xFFF000, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0x000000, 0xF1691C, 0xF1691C, 0xF1691C, 0x000000, 
  0x787878, 0x000000, 0xF1691C, 0xF1691C, 0x000000, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0xFFF000, 0xFFF000, 0xFFF000, 0x000000, 0x787878, 0x787878, 0x787878, 0x787878, 
  0x787878, 0x787878, 0x787878, 0x787878, 0x000000, 0x0DFD29, 0xFFF000, 0xFFF000, 0xFFFFFF, 0xFFFFFF, 0x000000, 0xFFFFFF, 0x000000, 0x000000, 0xE22CCB, 0x787878, 
  0x787878, 0x787878, 0xE22CCB, 0xFFFFFF, 0xFFFFFF, 0x000000, 0xFFFFFF, 0xFFFFFF, 0xFFF000, 0x0DFD29, 0x0DFD29, 0x0DFD29, 0x000000, 0x787878, 0x787878, 0x787878, 
  0x787878, 0x787878, 0x787878, 0x000000, 0x000000, 0x000000, 0x0DFD29, 0xFFF000, 0xFFFFFF, 0xF492E9, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0x000000, 0x787878, 0x787878, 
  0x787878, 0x787878, 0x000000, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0x000000, 0x0DFD29, 0x0DFD29, 0x000000, 0x000000, 0x787878, 0x787878, 
  0x787878, 0x000000, 0x006ED6, 0x0DFD29, 0xF1691C, 0xF1691C, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0x000000, 0x000000, 0x000000, 0x000000, 0x787878, 0x787878, 0x787878, 
  0x787878, 0x787878, 0x787878, 0x787878, 0x787878, 0x000000, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0xF492E9, 0xFF0000, 0xF1691C, 0x0DFD29, 0x006ED6, 0x000000, 
  0x000000, 0x006ED6, 0x0DFD29, 0xF1691C, 0xF492E9, 0xF492E9, 0xF492E9, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0x000000, 0x787878, 0x787878, 0x787878, 0x787878, 0x787878, 
  0x787878, 0x787878, 0x787878, 0x787878, 0x000000, 0x000000, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0x000000, 0x006ED6, 0x000000, 
  0x787878, 0x000000, 0x000000, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0x000000, 0x000000, 0x000000, 0xFFFFFF, 0x000000, 0xEEAC85, 0x000000, 0x787878, 0x787878, 0x787878, 
  0x787878, 0x787878, 0x787878, 0x787878, 0x000000, 0xEEAC85, 0xEEAC85, 0x000000, 0x787878, 0x000000, 0xEEAC85, 0x000000, 0xEEAC85, 0x000000, 0x787878, 0x787878, 
  0x787878, 0x787878, 0x787878, 0x000000, 0x000000, 0x000000, 0x787878, 0x787878, 0x787878, 0x000000, 0x000000, 0x787878, 0x787878, 0x787878, 0x787878, 0x787878
};

const long UnicornFull_01[] PROGMEM = 
{
  0x787878, 0x787878, 0x787878, 0x787878, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x787878, 0x787878, 0x787878, 0x787878, 0x787878, 0x787878, 0x787878, 
  0x787878, 0x787878, 0x787878, 0x787878, 0x787878, 0x787878, 0x000000, 0xFFFFFF, 0xFF00BA, 0xFF00BA, 0xFF00BA, 0xFF00BA, 0x787878, 0x000000, 0x000000, 0x000000, 
  0x1CF1BC, 0x1CF1BC, 0x000000, 0x000000, 0x000000, 0xFF00BA, 0xFF00BA, 0xFFFFFF, 0xFFFFFF, 0x0DFD29, 0x000000, 0x787878, 0x787878, 0x787878, 0x787878, 0x787878, 
  0x787878, 0x787878, 0x787878, 0x787878, 0x000000, 0x0DFD29, 0x0DFD29, 0x0DFD29, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0x000000, 0x1CF1BC, 0x1CF1BC, 0x1CF1BC, 0x000000, 
  0x787878, 0x000000, 0x1CF1BC, 0x1CF1BC, 0x000000, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0x0DFD29, 0x0DFD29, 0x0DFD29, 0x000000, 0x787878, 0x787878, 0x787878, 0x787878, 
  0x787878, 0x787878, 0x787878, 0x787878, 0x000000, 0xFFF000, 0x0DFD29, 0x0DFD29, 0xFFFFFF, 0xFFFFFF, 0x000000, 0xFFFFFF, 0x000000, 0x000000, 0xFF00BA, 0x787878, 
  0x787878, 0x787878, 0xFF00BA, 0xFFFFFF, 0xFFFFFF, 0x000000, 0xFFFFFF, 0xFFFFFF, 0x0DFD29, 0xFFF000, 0xFFF000, 0xFFF000, 0x000000, 0x787878, 0x787878, 0x787878, 
  0x787878, 0x787878, 0x787878, 0x000000, 0x000000, 0x000000, 0xFFF000, 0x0DFD29, 0xFFFFFF, 0x970086, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0x000000, 0x787878, 0x787878, 
  0x787878, 0x787878, 0x000000, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0x000000, 0xF1691C, 0xF1691C, 0x000000, 0x000000, 0x787878, 0x787878, 
  0x787878, 0x000000, 0xFF0000, 0xF1691C, 0x006ED6, 0x006ED6, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0x000000, 0x000000, 0x000000, 0x000000, 0x787878, 0x787878, 0x787878, 
  0x787878, 0x787878, 0x787878, 0x787878, 0x787878, 0x000000, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0x970086, 0x0DFD29, 0x006ED6, 0xF1691C, 0xFF0000, 0x000000, 
  0x000000, 0xFF0000, 0xF1691C, 0x006ED6, 0x970086, 0x970086, 0x970086, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0x000000, 0x787878, 0x787878, 0x787878, 0x787878, 0x787878, 
  0x787878, 0x787878, 0x787878, 0x787878, 0x000000, 0x000000, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0x000000, 0xFF0000, 0x000000, 
  0x787878, 0x000000, 0x000000, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0x000000, 0x000000, 0x000000, 0xFFFFFF, 0x000000, 0xEEAC85, 0x000000, 0x787878, 0x787878, 0x787878, 
  0x787878, 0x787878, 0x787878, 0x787878, 0x000000, 0xEEAC85, 0xEEAC85, 0x000000, 0x787878, 0x000000, 0xEEAC85, 0x000000, 0xEEAC85, 0x000000, 0x787878, 0x787878, 
  0x787878, 0x787878, 0x787878, 0x000000, 0x000000, 0x000000, 0x787878, 0x787878, 0x787878, 0x000000, 0x000000, 0x787878, 0x787878, 0x787878, 0x787878, 0x787878
};

// UnicornHead
const long UnicornHead_00[] PROGMEM = 
{
  0xFC5BF3, 0xFC5BF3, 0xFC5BF3, 0xEEF30C, 0xFC5BF3, 0xFC5BF3, 0xFC5BF3, 0xFC5BF3, 0xFC5BF3, 0xFC5BF3, 0xFC5BF3, 0xFC5BF3, 0xFC5BF3, 0xFC5BF3, 0xFC5BF3, 0xFC5BF3, 
  0xFC5BF3, 0xFC5BF3, 0xFC5BF3, 0xFC5BF3, 0xFC5BF3, 0xFC5BF3, 0xFC5BF3, 0xFC5BF3, 0xFC5BF3, 0xFC5BF3, 0xFC5BF3, 0xEEF30C, 0xEEF30C, 0xEEF30C, 0xFC5BF3, 0xFC5BF3, 
  0xFC5BF3, 0xFC5BF3, 0xFC5BF3, 0xEEF30C, 0xFFFFFF, 0xFC5BF3, 0xFC5BF3, 0xFC5BF3, 0xFC5BF3, 0xFC5BF3, 0xFC5BF3, 0xFC5BF3, 0xFC5BF3, 0xFC5BF3, 0xFC5BF3, 0xFC5BF3, 
  0xFC5BF3, 0xFC5BF3, 0xFC5BF3, 0xFC5BF3, 0xEDC1D2, 0xEDC1D2, 0xEDC1D2, 0xEDC1D2, 0xFC5BF3, 0xFC5BF3, 0xFFFFFF, 0xFFFFFF, 0xFC5BF3, 0xFC5BF3, 0xFC5BF3, 0xFC5BF3, 
  0xFC5BF3, 0xFC5BF3, 0xFC5BF3, 0xFC5BF3, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0xEDC1D2, 0xFF931C, 0xFF931C, 0xFF931C, 0xFF931C, 0xEDC1D2, 0xFC5BF3, 0xFC5BF3, 0xFC5BF3, 
  0xFC5BF3, 0xFC5BF3, 0xEDC1D2, 0xFF931C, 0xEEF30C, 0xEEF30C, 0xFFFFFF, 0xEEF30C, 0xFF931C, 0xFFFFFF, 0xFFFFFF, 0xFC5BF3, 0xFC5BF3, 0xFC5BF3, 0xFC5BF3, 0xFC5BF3, 
  0xFC5BF3, 0xFC5BF3, 0xFC5BF3, 0xFC5BF3, 0xFC5BF3, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0x009900, 0xEEF30C, 0xFF931C, 0xEDC1D2, 0xFC5BF3, 
  0xFC5BF3, 0xEDC1D2, 0xFF931C, 0xEEF30C, 0x009900, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0x010101, 0xFFFFFF, 0xFFFFFF, 0xFC5BF3, 0xFC5BF3, 0xFC5BF3, 0xFC5BF3, 
  0xFC5BF3, 0xFC5BF3, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0x010101, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0x0057A8, 0x009900, 0xEEF30C, 0xFF931C, 0xEDC1D2, 
  0xEDC1D2, 0xFF931C, 0xEEF30C, 0x009900, 0x0057A8, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0xFC5BF3, 
  0xFC5BF3, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0x0057A8, 0x009900, 0xEEF30C, 0xFF931C, 0xEDC1D2, 
  0xEDC1D2, 0xFF931C, 0xEEF30C, 0x009900, 0x0057A8, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0xFC5BF3, 
  0xFC5BF3, 0xFC5BF3, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0x0057A8, 0x009900, 0xEEF30C, 0xFF931C, 0xEDC1D2, 0xFC5BF3, 
  0xFC5BF3, 0xEDC1D2, 0xFF931C, 0xEEF30C, 0x009900, 0x0057A8, 0x6B327B, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0xFC5BF3, 0xFC5BF3, 0xFC5BF3, 0xFC5BF3, 0xFC5BF3, 0xFC5BF3, 
  0xFC5BF3, 0xFC5BF3, 0xFC5BF3, 0xFC5BF3, 0xFC5BF3, 0xFC5BF3, 0xFFFFFF, 0xFFFFFF, 0x6B327B, 0x0057A8, 0x009900, 0xEEF30C, 0xFF931C, 0xEDC1D2, 0xFC5BF3, 0xFC5BF3, 
  0xFC5BF3, 0xFC5BF3, 0xFC5BF3, 0xEDC1D2, 0xFF931C, 0xEEF30C, 0x009900, 0x0057A8, 0x6B327B, 0xFC5BF3, 0xFC5BF3, 0xFC5BF3, 0xFC5BF3, 0xFC5BF3, 0xFC5BF3, 0xFC5BF3
};

const long UnicornHead_01[] PROGMEM = 
{
  0x3CFF00, 0x3CFF00, 0x3CFF00, 0xEEF30C, 0x3CFF00, 0x3CFF00, 0x3CFF00, 0x3CFF00, 0x3CFF00, 0x3CFF00, 0x3CFF00, 0x3CFF00, 0x3CFF00, 0x3CFF00, 0x3CFF00, 0x3CFF00, 
  0x3CFF00, 0x3CFF00, 0x3CFF00, 0x3CFF00, 0x3CFF00, 0x3CFF00, 0x3CFF00, 0x3CFF00, 0x3CFF00, 0x3CFF00, 0x3CFF00, 0xEEF30C, 0xEEF30C, 0xEEF30C, 0x3CFF00, 0x3CFF00, 
  0x3CFF00, 0x3CFF00, 0x3CFF00, 0xEEF30C, 0xFFFFFF, 0x3CFF00, 0x3CFF00, 0x3CFF00, 0x3CFF00, 0x3CFF00, 0x3CFF00, 0x3CFF00, 0x3CFF00, 0x3CFF00, 0x3CFF00, 0x3CFF00, 
  0x3CFF00, 0x3CFF00, 0x3CFF00, 0x3CFF00, 0xEDC1D2, 0xEDC1D2, 0xEDC1D2, 0xEDC1D2, 0x3CFF00, 0x3CFF00, 0xFFFFFF, 0xFFFFFF, 0x3CFF00, 0x3CFF00, 0x3CFF00, 0x3CFF00, 
  0x3CFF00, 0x3CFF00, 0x3CFF00, 0x3CFF00, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0xEDC1D2, 0xFF931C, 0xFF931C, 0xFF931C, 0xFF931C, 0xEDC1D2, 0x3CFF00, 0x3CFF00, 0x3CFF00, 
  0x3CFF00, 0x3CFF00, 0xEDC1D2, 0xFF931C, 0xEEF30C, 0xEEF30C, 0xFFFFFF, 0xEEF30C, 0xFF931C, 0xFFFFFF, 0xFFFFFF, 0x3CFF00, 0x3CFF00, 0x3CFF00, 0x3CFF00, 0x3CFF00, 
  0x3CFF00, 0x3CFF00, 0x3CFF00, 0x3CFF00, 0x3CFF00, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0x009900, 0xEEF30C, 0xFF931C, 0xEDC1D2, 0x3CFF00, 
  0x3CFF00, 0xEDC1D2, 0xFF931C, 0xEEF30C, 0x009900, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0x010101, 0xFFFFFF, 0xFFFFFF, 0x3CFF00, 0x3CFF00, 0x3CFF00, 0x3CFF00, 
  0x3CFF00, 0x3CFF00, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0x010101, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0x0057A8, 0x009900, 0xEEF30C, 0xFF931C, 0xEDC1D2, 
  0xEDC1D2, 0xFF931C, 0xEEF30C, 0x009900, 0x0057A8, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0x3CFF00, 
  0x3CFF00, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0x0057A8, 0x009900, 0xEEF30C, 0xFF931C, 0xEDC1D2, 
  0xEDC1D2, 0xFF931C, 0xEEF30C, 0x009900, 0x0057A8, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0x3CFF00, 
  0x3CFF00, 0x3CFF00, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0x0057A8, 0x009900, 0xEEF30C, 0xFF931C, 0xEDC1D2, 0x3CFF00, 
  0x3CFF00, 0xEDC1D2, 0xFF931C, 0xEEF30C, 0x009900, 0x0057A8, 0x6B327B, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0x3CFF00, 0x3CFF00, 0x3CFF00, 0x3CFF00, 0x3CFF00, 0x3CFF00, 
  0x3CFF00, 0x3CFF00, 0x3CFF00, 0x3CFF00, 0x3CFF00, 0x3CFF00, 0xFFFFFF, 0xFFFFFF, 0x6B327B, 0x0057A8, 0x009900, 0xEEF30C, 0xFF931C, 0xEDC1D2, 0x3CFF00, 0x3CFF00, 
  0x3CFF00, 0x3CFF00, 0x3CFF00, 0xEDC1D2, 0xFF931C, 0xEEF30C, 0x009900, 0x0057A8, 0x6B327B, 0x3CFF00, 0x3CFF00, 0x3CFF00, 0x3CFF00, 0x3CFF00, 0x3CFF00, 0x3CFF00
};

const long UnicornHead_02[] PROGMEM = 
{
  0x00FFB4, 0x00FFB4, 0x00FFB4, 0xEEF30C, 0x00FFB4, 0x00FFB4, 0x00FFB4, 0x00FFB4, 0x00FFB4, 0x00FFB4, 0x00FFB4, 0x00FFB4, 0x00FFB4, 0x00FFB4, 0x00FFB4, 0x00FFB4, 
  0x00FFB4, 0x00FFB4, 0x00FFB4, 0x00FFB4, 0x00FFB4, 0x00FFB4, 0x00FFB4, 0x00FFB4, 0x00FFB4, 0x00FFB4, 0x00FFB4, 0xEEF30C, 0xEEF30C, 0xEEF30C, 0x00FFB4, 0x00FFB4, 
  0x00FFB4, 0x00FFB4, 0x00FFB4, 0xEEF30C, 0xFFFFFF, 0x00FFB4, 0x00FFB4, 0x00FFB4, 0x00FFB4, 0x00FFB4, 0x00FFB4, 0x00FFB4, 0x00FFB4, 0x00FFB4, 0x00FFB4, 0x00FFB4, 
  0x00FFB4, 0x00FFB4, 0x00FFB4, 0x00FFB4, 0xEDC1D2, 0xEDC1D2, 0xEDC1D2, 0xEDC1D2, 0x00FFB4, 0x00FFB4, 0xFFFFFF, 0xFFFFFF, 0x00FFB4, 0x00FFB4, 0x00FFB4, 0x00FFB4, 
  0x00FFB4, 0x00FFB4, 0x00FFB4, 0x00FFB4, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0xEDC1D2, 0xFF931C, 0xFF931C, 0xFF931C, 0xFF931C, 0xEDC1D2, 0x00FFB4, 0x00FFB4, 0x00FFB4, 
  0x00FFB4, 0x00FFB4, 0xEDC1D2, 0xFF931C, 0xEEF30C, 0xEEF30C, 0xFFFFFF, 0xEEF30C, 0xFF931C, 0xFFFFFF, 0xFFFFFF, 0x00FFB4, 0x00FFB4, 0x00FFB4, 0x00FFB4, 0x00FFB4, 
  0x00FFB4, 0x00FFB4, 0x00FFB4, 0x00FFB4, 0x00FFB4, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0x009900, 0xEEF30C, 0xFF931C, 0xEDC1D2, 0x00FFB4, 
  0x00FFB4, 0xEDC1D2, 0xFF931C, 0xEEF30C, 0x009900, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0x010101, 0xFFFFFF, 0xFFFFFF, 0x00FFB4, 0x00FFB4, 0x00FFB4, 0x00FFB4, 
  0x00FFB4, 0x00FFB4, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0x010101, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0x0057A8, 0x009900, 0xEEF30C, 0xFF931C, 0xEDC1D2, 
  0xEDC1D2, 0xFF931C, 0xEEF30C, 0x009900, 0x0057A8, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0x00FFB4, 
  0x00FFB4, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0x0057A8, 0x009900, 0xEEF30C, 0xFF931C, 0xEDC1D2, 
  0xEDC1D2, 0xFF931C, 0xEEF30C, 0x009900, 0x0057A8, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0x00FFB4, 
  0x00FFB4, 0x00FFB4, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0x0057A8, 0x009900, 0xEEF30C, 0xFF931C, 0xEDC1D2, 0x00FFB4, 
  0x00FFB4, 0xEDC1D2, 0xFF931C, 0xEEF30C, 0x009900, 0x0057A8, 0x6B327B, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0x00FFB4, 0x00FFB4, 0x00FFB4, 0x00FFB4, 0x00FFB4, 0x00FFB4, 
  0x00FFB4, 0x00FFB4, 0x00FFB4, 0x00FFB4, 0x00FFB4, 0x00FFB4, 0xFFFFFF, 0xFFFFFF, 0x6B327B, 0x0057A8, 0x009900, 0xEEF30C, 0xFF931C, 0xEDC1D2, 0x00FFB4, 0x00FFB4, 
  0x00FFB4, 0x00FFB4, 0x00FFB4, 0xEDC1D2, 0xFF931C, 0xEEF30C, 0x009900, 0x0057A8, 0x6B327B, 0x00FFB4, 0x00FFB4, 0x00FFB4, 0x00FFB4, 0x00FFB4, 0x00FFB4, 0x00FFB4
};

// UnicornWhale
const long UnicornWhale_00[] PROGMEM = 
{
  0x757575, 0x757575, 0x757575, 0x000000, 0x757575, 0x757575, 0x757575, 0x757575, 0x757575, 0x757575, 0x757575, 0x757575, 0x757575, 0x757575, 0x757575, 0x757575, 
  0x757575, 0x757575, 0xF84BB9, 0x757575, 0x757575, 0xF84BB9, 0x757575, 0x757575, 0x757575, 0x757575, 0x757575, 0x000000, 0x795BA2, 0x000000, 0x757575, 0x757575, 
  0x757575, 0x757575, 0x000000, 0x795BA2, 0x000000, 0x757575, 0x757575, 0x757575, 0x757575, 0xF84BB9, 0xF84BB9, 0xF84BB9, 0xF84BB9, 0xF84BB9, 0xF84BB9, 0x757575, 
  0x757575, 0x757575, 0xF84BB9, 0xF84BB9, 0xF84BB9, 0xF84BB9, 0x757575, 0x757575, 0x757575, 0x757575, 0x000000, 0xB7E51E, 0x795BA2, 0x000000, 0x757575, 0x757575, 
  0x757575, 0x757575, 0x757575, 0x000000, 0xB7E51E, 0xE6D806, 0x000000, 0x757575, 0x757575, 0x757575, 0x757575, 0xF84BB9, 0xF84BB9, 0x757575, 0x757575, 0x757575, 
  0x757575, 0x757575, 0x757575, 0x757575, 0x757575, 0x757575, 0x757575, 0x757575, 0x757575, 0x000000, 0xD78519, 0xE6D806, 0x000000, 0x757575, 0x757575, 0x757575, 
  0x757575, 0x757575, 0x000000, 0x000000, 0xD78519, 0xFB37B7, 0x000000, 0x000000, 0x000000, 0x757575, 0x757575, 0x757575, 0x757575, 0x757575, 0x757575, 0x757575, 
  0x757575, 0x757575, 0x757575, 0x757575, 0x757575, 0x000000, 0x000000, 0x82F4FF, 0x82F4FF, 0x82F4FF, 0x000000, 0x000000, 0x82F4FF, 0x1CB0C8, 0x000000, 0x757575, 
  0x000000, 0x1CB0C8, 0x1CB0C8, 0x82F4FF, 0x1CB0C8, 0x1CB0C8, 0x82F4FF, 0x82F4FF, 0x82F4FF, 0x82F4FF, 0x82F4FF, 0x000000, 0x757575, 0x000000, 0x000000, 0x757575, 
  0x000000, 0x1CB0C8, 0x1CB0C8, 0x000000, 0x82F4FF, 0x82F4FF, 0x82F4FF, 0x82F4FF, 0x000000, 0xFFFFFF, 0x82F4FF, 0x82F4FF, 0x000000, 0xFFFFFF, 0x1CB0C8, 0x000000, 
  0x000000, 0x865A9C, 0x000000, 0x000000, 0x82F4FF, 0x82F4FF, 0x000000, 0x000000, 0x865A9C, 0x82F4FF, 0x82F4FF, 0x000000, 0x1CB0C8, 0x1CB0C8, 0x1CB0C8, 0x000000, 
  0x000000, 0x1CB0C8, 0x1CB0C8, 0x1CB0C8, 0x82F4FF, 0x82F4FF, 0x82F4FF, 0x82F4FF, 0x82F4FF, 0x82F4FF, 0x82F4FF, 0x82F4FF, 0x82F4FF, 0x82F4FF, 0x1CB0C8, 0x000000, 
  0x000000, 0x1CB0C8, 0x1CB0C8, 0x000000, 0x82F4FF, 0x82F4FF, 0x000000, 0x1CB0C8, 0x1CB0C8, 0x7EECF7, 0x82F4FF, 0x82F4FF, 0x000000, 0x000000, 0x000000, 0x757575, 
  0x757575, 0x757575, 0x757575, 0x757575, 0x000000, 0x82F4FF, 0x1CB0C8, 0x1CB0C8, 0x1CB0C8, 0x82F4FF, 0x000000, 0x000000, 0x82F4FF, 0x1CB0C8, 0x000000, 0x757575, 
  0x757575, 0x757575, 0x000000, 0x82F4FF, 0x82F4FF, 0x82F4FF, 0x82F4FF, 0x82F4FF, 0x000000, 0x000000, 0x000000, 0x757575, 0x757575, 0x757575, 0x757575, 0x757575, 
  0x757575, 0x757575, 0x757575, 0x757575, 0x757575, 0x757575, 0x757575, 0x757575, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x757575, 0x757575, 0x757575
};

const long UnicornWhale_01[] PROGMEM = 
{
  0x757575, 0x757575, 0x757575, 0x000000, 0x757575, 0x757575, 0x757575, 0x757575, 0x757575, 0x757575, 0x757575, 0x757575, 0x757575, 0x757575, 0x757575, 0x757575, 
  0x757575, 0xF84BB9, 0xF84BB9, 0x757575, 0x757575, 0xF84BB9, 0xF84BB9, 0x757575, 0x757575, 0x757575, 0x757575, 0x000000, 0x795BA2, 0x000000, 0x757575, 0x757575, 
  0x757575, 0x757575, 0x000000, 0x795BA2, 0x000000, 0x757575, 0x757575, 0x757575, 0xF84BB9, 0xF84BB9, 0xF84BB9, 0xF84BB9, 0xF84BB9, 0xF84BB9, 0xF84BB9, 0xF84BB9, 
  0x757575, 0xF84BB9, 0xF84BB9, 0xF84BB9, 0xF84BB9, 0xF84BB9, 0xF84BB9, 0x757575, 0x757575, 0x757575, 0x000000, 0xB7E51E, 0x795BA2, 0x000000, 0x757575, 0x757575, 
  0x757575, 0x757575, 0x757575, 0x000000, 0xB7E51E, 0xE6D806, 0x000000, 0x757575, 0x757575, 0x757575, 0xF84BB9, 0xF84BB9, 0xF84BB9, 0xF84BB9, 0x757575, 0x757575, 
  0x757575, 0x757575, 0x757575, 0xF84BB9, 0xF84BB9, 0x757575, 0x757575, 0x757575, 0x757575, 0x000000, 0xD78519, 0xE6D806, 0x000000, 0x757575, 0x757575, 0x757575, 
  0x757575, 0x757575, 0x000000, 0x000000, 0xD78519, 0xFB37B7, 0x000000, 0x000000, 0x000000, 0x757575, 0x757575, 0x757575, 0x757575, 0x757575, 0x757575, 0x757575, 
  0x757575, 0x757575, 0x757575, 0x757575, 0x757575, 0x000000, 0x000000, 0x82F4FF, 0x82F4FF, 0x82F4FF, 0x000000, 0x000000, 0x82F4FF, 0x1CB0C8, 0x000000, 0x757575, 
  0x000000, 0x1CB0C8, 0x1CB0C8, 0x82F4FF, 0x1CB0C8, 0x1CB0C8, 0x82F4FF, 0x82F4FF, 0x82F4FF, 0x82F4FF, 0x82F4FF, 0x000000, 0x757575, 0x000000, 0x000000, 0x757575, 
  0x000000, 0x1CB0C8, 0x1CB0C8, 0x000000, 0x82F4FF, 0x82F4FF, 0x82F4FF, 0x82F4FF, 0x000000, 0xFFFFFF, 0x82F4FF, 0x82F4FF, 0x000000, 0xFFFFFF, 0x1CB0C8, 0x000000, 
  0x000000, 0x865A9C, 0x000000, 0x000000, 0x82F4FF, 0x82F4FF, 0x000000, 0x000000, 0x865A9C, 0x82F4FF, 0x82F4FF, 0x000000, 0x1CB0C8, 0x1CB0C8, 0x1CB0C8, 0x000000, 
  0x000000, 0x1CB0C8, 0x1CB0C8, 0x1CB0C8, 0x82F4FF, 0x82F4FF, 0x82F4FF, 0x82F4FF, 0x82F4FF, 0x82F4FF, 0x82F4FF, 0x82F4FF, 0x82F4FF, 0x82F4FF, 0x1CB0C8, 0x000000, 
  0x000000, 0x1CB0C8, 0x1CB0C8, 0x000000, 0x82F4FF, 0x82F4FF, 0x000000, 0x1CB0C8, 0x1CB0C8, 0x7EECF7, 0x82F4FF, 0x82F4FF, 0x000000, 0x000000, 0x000000, 0x757575, 
  0x757575, 0x757575, 0x757575, 0x757575, 0x000000, 0x82F4FF, 0x1CB0C8, 0x1CB0C8, 0x1CB0C8, 0x82F4FF, 0x000000, 0x000000, 0x82F4FF, 0x1CB0C8, 0x000000, 0x757575, 
  0x757575, 0x757575, 0x000000, 0x82F4FF, 0x82F4FF, 0x82F4FF, 0x82F4FF, 0x82F4FF, 0x000000, 0x000000, 0x000000, 0x757575, 0x757575, 0x757575, 0x757575, 0x757575, 
  0x757575, 0x757575, 0x757575, 0x757575, 0x757575, 0x757575, 0x757575, 0x757575, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x757575, 0x757575, 0x757575
};

// ColorGradient
const long ColorGradient_00[] PROGMEM = 
{
  0xFFD02F, 0xFFE917, 0xFFF709, 0xFFFE01, 0xFFFF00, 0xD3FF2C, 0x92FF6E, 0x64FF9C, 0x40FFC0, 0x24FFDB, 0x11FFEE, 0x06FFFA, 0x00FFFF, 0x03FCFF, 0x42BDFF, 0x807FFF, 
  0x8E71FF, 0x58A8FF, 0x11EEFF, 0x00FFFF, 0x02FFFD, 0x0DFFF3, 0x1DFFE2, 0x35FFCA, 0x57FFA8, 0x82FF7D, 0xBDFF43, 0xFCFF02, 0xFFFF00, 0xFFFA05, 0xFFEE11, 0xFFD827, 
  0xFFDE21, 0xFFF20D, 0xFFFC03, 0xFFFF00, 0xEEFF10, 0xA9FF57, 0x75FF8B, 0x4CFFB3, 0x2EFFD2, 0x17FFE8, 0x09FFF6, 0x00FFFE, 0x00FFFF, 0x23DCFF, 0x6996FF, 0x9B64FF, 
  0xA659FF, 0x7788FF, 0x38C7FF, 0x00FFFF, 0x00FFFF, 0x06FFF9, 0x13FFEC, 0x27FFD8, 0x43FFBC, 0x68FF97, 0x98FF68, 0xDCFF23, 0xFFFF00, 0xFFFE00, 0xFFF609, 0xFFE41B, 
  0xFFE916, 0xFFF807, 0xFFFF00, 0xFFFF00, 0xC7FF38, 0x89FF76, 0x5CFFA3, 0x3AFFC5, 0x20FFDF, 0x0EFFF1, 0x04FFFB, 0x00FFFF, 0x08F6FF, 0x4DB2FF, 0x847BFF, 0xB04FFF, 
  0xBA45FF, 0x916EFF, 0x5FA0FF, 0x1AE6FF, 0x00FFFF, 0x01FFFD, 0x0BFFF5, 0x1AFFE4, 0x32FFCE, 0x52FFAE, 0x7BFF84, 0xB3FF4D, 0xF7FF08, 0xFFFF00, 0xFFFB05, 0xFFEE11, 
  0xFFF20D, 0xFFFD02, 0xFFFF00, 0xE6FF19, 0xA0FF5F, 0x6FFF91, 0x48FFB7, 0x2AFFD5, 0x15FFE9, 0x08FFF8, 0x00FFFF, 0x00FFFF, 0x2DD2FF, 0x6E91FF, 0x9D62FF, 0xC33CFF, 
  0xCC34FF, 0xA857FF, 0x7D82FF, 0x42BDFF, 0x02FDFF, 0x00FFFF, 0x05FFFA, 0x10FFEF, 0x23FFDB, 0x3EFFC1, 0x63FF9D, 0x90FF6F, 0xD3FF2D, 0xFFFF00, 0xFFFE00, 0xFFF50A, 
  0xFFF808, 0xFFFF00, 0xFDFF02, 0xBDFF42, 0x82FF7D, 0x57FFA8, 0x36FFC9, 0x1DFFE1, 0x0DFFF3, 0x02FFFC, 0x00FFFF, 0x10EFFF, 0x56A9FF, 0x8A75FF, 0xB34DFF, 0xD32CFF, 
  0xDA25FF, 0xBC43FF, 0x9669FF, 0x6798FF, 0x22DDFF, 0x00FFFF, 0x00FFFE, 0x09FFF6, 0x18FFE7, 0x2EFFD1, 0x4DFFB2, 0x75FF8A, 0xA9FF56, 0xEFFF10, 0xFFFF00, 0xFFFA05, 
  0xFFFC01, 0xFFFF00, 0xDDFF22, 0x98FF67, 0x69FF96, 0x43FFBC, 0x27FFD8, 0x13FFEC, 0x06FFF9, 0x00FFFF, 0x00FFFF, 0x37C9FF, 0x758AFF, 0xA25DFF, 0xC53AFF, 0xE01FFF, 
  0xE619FF, 0xCD32FF, 0xAD53FF, 0x827CFF, 0x4BB4FF, 0x07F7FF, 0x00FFFF, 0x04FFFB, 0x0EFFF1, 0x20FFDE, 0x3AFFC5, 0x5DFFA2, 0x8AFF75, 0xC8FF37, 0xFFFF00, 0xFFFE00, 
  0xFFFF00, 0xF8FF07, 0xB4FF4C, 0x7CFF83, 0x52FFAD, 0x32FFCD, 0x1AFFE4, 0x0BFFF4, 0x01FFFD, 0x00FFFF, 0x18E7FF, 0x5EA1FF, 0x8F6FFF, 0xB748FF, 0xD52AFF, 0xEB14FF, 
  0xEF10FF, 0xDC24FF, 0xC03FFF, 0x9C63FF, 0x6E91FF, 0x2CD4FF, 0x00FFFF, 0x00FFFF, 0x08FFF8, 0x16FFE9, 0x2BFFD4, 0x48FFB7, 0x6FFF8F, 0xA2FF5E, 0xE7FF18, 0xFFFF00, 
  0xFFFF00, 0xD3FF2C, 0x91FF6E, 0x63FF9C, 0x3FFFC0, 0x23FFDB, 0x11FFEF, 0x05FFFA, 0x00FFFF, 0x02FDFF, 0x41BFFF, 0x7C83FF, 0xA758FF, 0xC937FF, 0xE21DFF, 0xF30CFF, 
  0xF609FF, 0xE717FF, 0xD12EFF, 0xB34DFF, 0x8A75FF, 0x56A9FF, 0x11EEFF, 0x00FFFF, 0x03FFFC, 0x0DFFF3, 0x1DFFE2, 0x36FFCA, 0x57FFA8, 0x82FF7D, 0xBCFF43, 0xFBFF04
};

const long ColorGradient_01[] PROGMEM = 
{
  0xFFFF00, 0xF5FF0A, 0xB3FF4D, 0x7BFF83, 0x52FFAE, 0x32FFCE, 0x1BFFE4, 0x0BFFF4, 0x01FFFD, 0x00FFFF, 0x1AE5FF, 0x5FA0FF, 0x906FFF, 0xB748FF, 0xD52AFF, 0xEB15FF, 
  0xF00FFF, 0xDC22FF, 0xC23EFF, 0x9E61FF, 0x708FFF, 0x2FD0FF, 0x00FFFF, 0x00FFFF, 0x08FFF8, 0x14FFEA, 0x29FFD6, 0x47FFB9, 0x6EFF92, 0x9FFF60, 0xE4FF1B, 0xFFFF00, 
  0xFFFF00, 0xD0FF2F, 0x8FFF71, 0x62FF9E, 0x3DFFC2, 0x23FFDC, 0x10FFEF, 0x05FFFA, 0x00FFFF, 0x03FCFF, 0x44BBFF, 0x7E81FF, 0xA956FF, 0xCA35FF, 0xE31CFF, 0xF40BFF, 
  0xF708FF, 0xE817FF, 0xD22DFF, 0xB34CFF, 0x8B74FF, 0x58A7FF, 0x12EDFF, 0x00FFFF, 0x02FFFD, 0x0CFFF3, 0x1CFFE2, 0x35FFCA, 0x56FFA9, 0x81FF7E, 0xBBFF45, 0xFCFF03, 
  0xEDFF13, 0xA7FF58, 0x74FF8B, 0x4CFFB4, 0x2DFFD2, 0x17FFE8, 0x09FFF7, 0x00FFFE, 0x00FFFF, 0x25DAFF, 0x6897FF, 0x9868FF, 0xBD42FF, 0xD926FF, 0xED12FF, 0xF906FF, 
  0xFB04FF, 0xF10EFF, 0xDF20FF, 0xC63AFF, 0xA35CFF, 0x7788FF, 0x39C6FF, 0x00FFFF, 0x00FFFF, 0x06FFFA, 0x12FFED, 0x26FFD9, 0x42FFBD, 0x68FF98, 0x98FF67, 0xDAFF25, 
  0xC8FF37, 0x8AFF75, 0x5CFFA3, 0x39FFC6, 0x20FFDF, 0x0EFFF1, 0x04FFFB, 0x00FFFF, 0x09F6FF, 0x4EB2FF, 0x847BFF, 0xAE51FF, 0xCE31FF, 0xE51AFF, 0xF40BFF, 0xFD02FF, 
  0xFE00FF, 0xF807FF, 0xEA15FF, 0xD52AFF, 0xB848FF, 0x916EFF, 0x609FFF, 0x1AE5FF, 0x00FFFF, 0x00FFFD, 0x0BFFF5, 0x1AFFE5, 0x31FFCE, 0x51FFAE, 0x7CFF83, 0xB7FF49, 
  0xA7FF59, 0x6FFF90, 0x47FFB8, 0x2AFFD5, 0x15FFEA, 0x08FFF8, 0x00FFFF, 0x00FFFF, 0x2ED1FF, 0x7090FF, 0x9D62FF, 0xC13EFF, 0xDC23FF, 0xEE10FF, 0xFA04FF, 0xFF00FF, 
  0xFF00FF, 0xFC03FF, 0xF30CFF, 0xE21DFF, 0xC936FF, 0xA857FF, 0x7D82FF, 0x43BCFF, 0x02FCFF, 0x00FFFF, 0x05FFFA, 0x10FFEF, 0x23FFDC, 0x3EFFC1, 0x64FF9C, 0x98FF67, 
  0x89FF76, 0x58FFA7, 0x36FFCA, 0x1DFFE2, 0x0CFFF3, 0x02FFFC, 0x00FFFF, 0x10EEFF, 0x57A8FF, 0x8A75FF, 0xB34DFF, 0xD12EFF, 0xE818FF, 0xF609FF, 0xFE01FF, 0xFF00FF, 
  0xFF05FA, 0xFE00FF, 0xF907FF, 0xEC13FF, 0xD927FF, 0xBC43FF, 0x9668FF, 0x6797FF, 0x23DCFF, 0x00FFFF, 0x00FFFE, 0x09FFF6, 0x18FFE7, 0x2EFFD1, 0x4EFFB1, 0x7CFF84, 
  0x6FFF90, 0x44FFBB, 0x27FFD8, 0x13FFEC, 0x07FFF9, 0x00FFFF, 0x00FFFF, 0x38C7FF, 0x7689FF, 0xA35DFF, 0xC53AFF, 0xDF20FF, 0xF10EFF, 0xFB04FF, 0xFF00FF, 0xFF10EF, 
  0xFF20DF, 0xFF00FF, 0xFD01FF, 0xF40BFF, 0xE41AFF, 0xCD32FF, 0xAD52FF, 0x847CFF, 0x4DB3FF, 0x08F6FF, 0x00FFFF, 0x04FFFB, 0x0EFFF1, 0x20FFDE, 0x3BFFC4, 0x63FF9C, 
  0x58FFA8, 0x33FFCD, 0x1AFFE5, 0x0BFFF5, 0x01FFFD, 0x00FFFF, 0x1AE6FF, 0x5FA0FF, 0x906FFF, 0xB748FF, 0xD52AFF, 0xEA15FF, 0xF708FF, 0xFE00FF, 0xFF00FF, 0xFF33CD, 
  0xFF49B5, 0xFF05FA, 0xFF00FF, 0xFA05FF, 0xEF10FF, 0xDC23FF, 0xC13EFF, 0x9D62FF, 0x708FFF, 0x2FD0FF, 0x00FFFF, 0x00FFFE, 0x08FFF8, 0x15FFEA, 0x2BFFD4, 0x4CFFB3
};

const long ColorGradient_02[] PROGMEM = 
{
  0x6DFF93, 0x43FFBD, 0x26FFDA, 0x13FFED, 0x06FFF9, 0x00FFFF, 0x01FEFF, 0x3CC3FF, 0x7987FF, 0xA45BFF, 0xC739FF, 0xE01FFF, 0xF10EFF, 0xFB04FF, 0xFF00FF, 0xFF13EC, 
  0xFF25DA, 0xFF00FF, 0xFD00FF, 0xF50AFF, 0xE619FF, 0xD030FF, 0xB04FFF, 0x8778FF, 0x52ADFF, 0x0DF2FF, 0x00FFFF, 0x03FFFC, 0x0DFFF2, 0x1EFFE0, 0x39FFC7, 0x60FF9F, 
  0x55FFAA, 0x30FFCF, 0x19FFE6, 0x0AFFF5, 0x00FFFE, 0x00FFFF, 0x1FE0FF, 0x649BFF, 0x946BFF, 0xBA45FF, 0xD728FF, 0xEB13FF, 0xF807FF, 0xFF00FF, 0xFF00FF, 0xFF39C7, 
  0xFF4EB2, 0xFF07F8, 0xFF00FF, 0xFB04FF, 0xF00FFF, 0xDD21FF, 0xC33CFF, 0xA05FFF, 0x738CFF, 0x33CCFF, 0x00FFFF, 0x00FFFF, 0x07FFF8, 0x14FFEB, 0x29FFD6, 0x4AFFB5, 
  0x41FFBE, 0x23FFDD, 0x0FFFF0, 0x05FFFB, 0x00FFFF, 0x05FAFF, 0x48B7FF, 0x807EFF, 0xAB54FF, 0xCC34FF, 0xE31BFF, 0xF40CFF, 0xFC01FF, 0xFF00FF, 0xFF17E9, 0xFF609F, 
  0xFF708F, 0xFF29D6, 0xFF00FF, 0xFE00FF, 0xF708FF, 0xE916FF, 0xD32CFF, 0xB54AFF, 0x8E72FF, 0x5BA4FF, 0x15EAFF, 0x00FFFF, 0x01FFFD, 0x0CFFF4, 0x1CFFE2, 0x38FFC7, 
  0x30FFCF, 0x17FFE8, 0x09FFF7, 0x00FFFE, 0x00FFFF, 0x28D7FF, 0x6B94FF, 0x9A65FF, 0xBF41FF, 0xDA25FF, 0xED12FF, 0xF905FF, 0xFF00FF, 0xFF01FF, 0xFF3EC1, 0xFF7E81, 
  0xFF8B74, 0xFF52AD, 0xFF0DF3, 0xFF00FF, 0xFB03FF, 0xF20DFF, 0xE01EFF, 0xC738FF, 0xA55AFF, 0x7986FF, 0x3DC2FF, 0x00FEFF, 0x00FFFF, 0x06FFFA, 0x12FFED, 0x29FFD5, 
  0x23FFDC, 0x0EFFF1, 0x03FFFC, 0x00FFFF, 0x0CF3FF, 0x51AEFF, 0x8778FF, 0xB050FF, 0xCF30FF, 0xE619FF, 0xF50AFF, 0xFD00FF, 0xFF00FF, 0xFF1EE1, 0xFF649B, 0xFF9868, 
  0xFFA35C, 0xFF738C, 0xFF32CE, 0xFF00FF, 0xFF00FF, 0xF807FF, 0xEB14FF, 0xD728FF, 0xBA46FF, 0x936CFF, 0x639CFF, 0x1EE1FF, 0x00FFFF, 0x00FFFE, 0x0AFFF5, 0x1DFFE2, 
  0x17FFE8, 0x07FFF8, 0x00FFFF, 0x00FFFF, 0x32CEFF, 0x728DFF, 0x9F60FF, 0xC33DFF, 0xDD22FF, 0xF00FFF, 0xFA04FF, 0xFF00FF, 0xFF05FB, 0xFF47B9, 0xFF817F, 0xFFAE52, 
  0xFFB748, 0xFF8D72, 0xFF5AA5, 0xFF15EB, 0xFF00FF, 0xFC02FF, 0xF30CFF, 0xE31CFF, 0xCB34FF, 0xAA55FF, 0x8080FF, 0x47B8FF, 0x04FAFF, 0x00FFFF, 0x05FFFA, 0x13FFED, 
  0x0EFFF1, 0x02FFFC, 0x00FFFF, 0x14EBFF, 0x5AA5FF, 0x8D72FF, 0xB44BFF, 0xD32CFF, 0xE916FF, 0xF609FF, 0xFE00FF, 0xFF00FF, 0xFF27D8, 0xFF6B95, 0xFF9A65, 0xFFC13E, 
  0xFFCA36, 0xFFA65A, 0xFF7987, 0xFF3CC4, 0xFF00FF, 0xFF00FF, 0xFA06FF, 0xED12FF, 0xD925FF, 0xBE41FF, 0x9966FF, 0x6A95FF, 0x27D8FF, 0x00FFFF, 0x00FFFE, 0x0BFFF5, 
  0x08FFF8, 0x00FFFF, 0x00FFFF, 0x3CC3FF, 0x7986FF, 0xA55BFF, 0xC738FF, 0xE01FFF, 0xF20EFF, 0xFC03FF, 0xFF00FF, 0xFF0BF4, 0xFF50AF, 0xFF8679, 0xFFB04F, 0xFFD12E, 
  0xFFD827, 0xFFBA45, 0xFF946B, 0xFF649C, 0xFF20E0, 0xFF00FF, 0xFD01FF, 0xF50AFF, 0xE619FF, 0xD030FF, 0xB04FFF, 0x8778FF, 0x52ADFF, 0x0DF1FF, 0x00FFFF, 0x05FFFA
};

const long ColorGradient_03[] PROGMEM = 
{
  0x0FFFF1, 0x02FFFC, 0x00FFFF, 0x16E9FF, 0x5BA4FF, 0x8D72FF, 0xB54BFF, 0xD32CFF, 0xE817FF, 0xF709FF, 0xFE01FF, 0xFF00FF, 0xFF29D7, 0xFF6B94, 0xFF9A65, 0xFFC13E, 
  0xFFCA35, 0xFFA758, 0xFF7B84, 0xFF3FC1, 0xFF01FE, 0xFF00FF, 0xF905FF, 0xEE11FF, 0xDB24FF, 0xC040FF, 0x9A65FF, 0x6D93FF, 0x2AD5FF, 0x00FFFF, 0x00FFFE, 0x0BFFF5, 
  0x08FFF8, 0x00FFFF, 0x00FEFF, 0x40C0FF, 0x7B84FF, 0xA659FF, 0xC837FF, 0xE11EFF, 0xF20DFF, 0xFC03FF, 0xFF00FF, 0xFF0EF1, 0xFF53AC, 0xFF8977, 0xFFB24E, 0xFFD22D, 
  0xFFDA26, 0xFFBC44, 0xFF956A, 0xFF659A, 0xFF20DF, 0xFF00FF, 0xFD00FF, 0xF50AFF, 0xE618FF, 0xD02FFF, 0xB14EFF, 0x8877FF, 0x53ACFF, 0x0EF1FF, 0x00FFFF, 0x05FFFA, 
  0x01FFFC, 0x00FFFF, 0x20DFFF, 0x659AFF, 0x956AFF, 0xBB45FF, 0xD728FF, 0xEC14FF, 0xF807FF, 0xFE00FF, 0xFF00FF, 0xFF34CB, 0xFF748B, 0xFFA15E, 0xFFC53B, 0xFFE01F, 
  0xFFE51A, 0xFFCD33, 0xFFAC54, 0xFF827E, 0xFF49B6, 0xFF06F9, 0xFF00FF, 0xFB04FF, 0xF00FFF, 0xDE21FF, 0xC43CFF, 0xA05FFF, 0x748BFF, 0x34CBFF, 0x00FFFF, 0x00FFFE, 
  0x00FFFE, 0x05F9FF, 0x49B6FF, 0x817EFF, 0xAB54FF, 0xCC33FF, 0xE41BFF, 0xF30BFF, 0xFD01FF, 0xFF00FF, 0xFF16E9, 0xFF5CA3, 0xFF8E71, 0xFFB64A, 0xFFD42B, 0xFFEA15, 
  0xFFEE10, 0xFFDB24, 0xFFBF40, 0xFF9B65, 0xFF6C93, 0xFF29D6, 0xFF00FF, 0xFE00FF, 0xF708FF, 0xE916FF, 0xD32CFF, 0xB54AFF, 0x8E71FF, 0x5CA3FF, 0x16E9FF, 0x00FFFF, 
  0x00FFFF, 0x29D6FF, 0x6C93FF, 0x9A65FF, 0xBF40FF, 0xDA25FF, 0xEE11FF, 0xFA06FF, 0xFF00FF, 0xFF01FE, 0xFF3EC1, 0xFF7A85, 0xFFA659, 0xFFC838, 0xFFE11E, 0xFFF30D, 
  0xFFF60A, 0xFFE618, 0xFFD030, 0xFFB14F, 0xFF8777, 0xFF52AD, 0xFF0DF2, 0xFF00FF, 0xFC03FF, 0xF20EFF, 0xE11EFF, 0xC838FF, 0xA65AFF, 0x7A85FF, 0x3EC1FF, 0x01FFFF, 
  0x0DF2FF, 0x52ADFF, 0x8778FF, 0xB04FFF, 0xD030FF, 0xE619FF, 0xF50AFF, 0xFD00FF, 0xFF00FF, 0xFF1FE1, 0xFF649C, 0xFF946B, 0xFFBB45, 0xFFD728, 0xFFEB14, 0xFFF807, 
  0xFFFB05, 0xFFF00F, 0xFFDD21, 0xFFC33C, 0xFFA05F, 0xFF738D, 0xFF33CC, 0xFF00FF, 0xFE00FF, 0xF807FF, 0xEB13FF, 0xD729FF, 0xBA45FF, 0x946BFF, 0x639CFF, 0x20E0FF, 
  0x32CDFF, 0x718EFF, 0xA05FFF, 0xC33CFF, 0xDD22FF, 0xF00FFF, 0xFB04FF, 0xFF00FF, 0xFF05FA, 0xFF48B7, 0xFF817F, 0xFFAB54, 0xFFCC33, 0xFFE31C, 0xFFF30C, 0xFFFD03, 
  0xFFFE02, 0xFFF708, 0xFFE917, 0xFFD32C, 0xFFB54A, 0xFF8D71, 0xFF5BA5, 0xFF15EA, 0xFF00FF, 0xFC02FF, 0xF30CFF, 0xE41CFF, 0xCB34FF, 0xAB55FF, 0x7E80FF, 0x43BCFF, 
  0x54ABFF, 0x8C73FF, 0xB64AFF, 0xD32CFF, 0xE816FF, 0xF608FF, 0xFE00FF, 0xFF00FF, 0xFF28D7, 0xFF6B94, 0xFF9A65, 0xFFBF41, 0xFFDA25, 0xFFED11, 0xFFFA06, 0xFFFF00, 
  0xFFFF00, 0xFFFC04, 0xFFF20E, 0xFFE11E, 0xFFC837, 0xFFA659, 0xFF7B84, 0xFF3FC0, 0xFF02FD, 0xFF00FF, 0xFA06FF, 0xEE11FF, 0xDA24FF, 0xBF40FF, 0x9966FF, 0x649BFF
};

const long ColorGradient_04[] PROGMEM = 
{
  0x35CAFF, 0x738CFF, 0xA15EFF, 0xC53BFF, 0xDF21FF, 0xF00FFF, 0xFB05FF, 0xFF00FF, 0xFF0AF6, 0xFF4CB3, 0xFF837C, 0xFFAD53, 0xFFCD33, 0xFFE41B, 0xFFF40C, 0xFFFD03, 
  0xFFFE01, 0xFFF707, 0xFFEA15, 0xFFD52A, 0xFFB847, 0xFF916E, 0xFF60A0, 0xFF1AE5, 0xFF00FF, 0xFD00FF, 0xF40BFF, 0xE51AFF, 0xCE31FF, 0xAE52FF, 0x827CFF, 0x48B7FF, 
  0x59A7FF, 0x8F6FFF, 0xB848FF, 0xD62AFF, 0xEA15FF, 0xF707FF, 0xFE00FF, 0xFF00FF, 0xFF2ED1, 0xFF7090, 0xFF9D62, 0xFFC13E, 0xFFDC23, 0xFFEF10, 0xFFFB05, 0xFFFF00, 
  0xFFFF00, 0xFFFC04, 0xFFF30D, 0xFFE21D, 0xFFCA36, 0xFFA857, 0xFF7D82, 0xFF43BC, 0xFF03FD, 0xFF00FF, 0xFA05FF, 0xEF10FF, 0xDC23FF, 0xC13EFF, 0x9C63FF, 0x6798FF, 
  0x7689FF, 0xA758FF, 0xCA35FF, 0xE21DFF, 0xF30CFF, 0xFC02FF, 0xFF00FF, 0xFF11EE, 0xFF57A8, 0xFF8B74, 0xFFB34C, 0xFFD22E, 0xFFE817, 0xFFF609, 0xFFFD01, 0xFFFF00, 
  0xFAFF05, 0xFFFF00, 0xFFF907, 0xFFEC13, 0xFFD927, 0xFFBD43, 0xFF9768, 0xFF6898, 0xFF24DC, 0xFF00FF, 0xFE00FF, 0xF609FF, 0xE718FF, 0xD12EFF, 0xB14EFF, 0x837CFF, 
  0x906FFF, 0xBB44FF, 0xD827FF, 0xEC13FF, 0xF906FF, 0xFF00FF, 0xFF00FF, 0xFF38C8, 0xFF7689, 0xFFA25D, 0xFFC53A, 0xFFDF20, 0xFFF10F, 0xFFFC05, 0xFFFF00, 0xEFFF0F, 
  0xDFFF1F, 0xFFFF00, 0xFFFD01, 0xFFF40B, 0xFFE41A, 0xFFCD32, 0xFFAD52, 0xFF847B, 0xFF4DB3, 0xFF08F7, 0xFF00FF, 0xFB04FF, 0xF10EFF, 0xDF20FF, 0xC43BFF, 0x9C63FF, 
  0xA758FF, 0xCC33FF, 0xE51AFF, 0xF40BFF, 0xFC00FF, 0xFF00FF, 0xFF1AE6, 0xFF5FA0, 0xFF916E, 0xFFB848, 0xFFD52A, 0xFFEA15, 0xFFF708, 0xFFFE00, 0xFFFF00, 0xCCFF33, 
  0xB8FF48, 0xFCFF03, 0xFFFF00, 0xFFFA06, 0xFFEE11, 0xFFDC23, 0xFFC13F, 0xFF9D63, 0xFF6F91, 0xFF2DD2, 0xFF00FF, 0xFE00FF, 0xF708FF, 0xE915FF, 0xD42BFF, 0xB24DFF, 
  0xBB44FF, 0xDB25FF, 0xEE11FF, 0xFA05FF, 0xFF00FF, 0xFF02FD, 0xFF41BE, 0xFF7D83, 0xFFA758, 0xFFC936, 0xFFE21E, 0xFFF30D, 0xFFFC03, 0xFFFF00, 0xEEFF11, 0xA4FF5B, 
  0x94FF6C, 0xDCFF23, 0xFFFF00, 0xFFFE00, 0xFFF60A, 0xFFE718, 0xFFD12E, 0xFFB24D, 0xFF8A75, 0xFF56AA, 0xFF10EF, 0xFF00FF, 0xFC02FF, 0xF20DFF, 0xE11EFF, 0xC53BFF, 
  0xCD33FF, 0xE619FF, 0xF609FF, 0xFD00FF, 0xFF00FF, 0xFF22DD, 0xFF6799, 0xFF9669, 0xFFBC43, 0xFFD827, 0xFFEC13, 0xFFF907, 0xFFFF00, 0xFFFF00, 0xC7FF38, 0x85FF7A, 
  0x78FF88, 0xB3FF4D, 0xF7FF07, 0xFFFF00, 0xFFFB05, 0xFFF10F, 0xFFDE21, 0xFFC53A, 0xFFA25D, 0xFF758A, 0xFF36C9, 0xFF00FF, 0xFF00FF, 0xF907FF, 0xEB14FF, 0xD42BFF, 
  0xDA24FF, 0xF00FFF, 0xFB04FF, 0xFF00FF, 0xFF08F7, 0xFF4BB4, 0xFF837C, 0xFFAD53, 0xFFCE32, 0xFFE41A, 0xFFF40B, 0xFFFD02, 0xFFFF00, 0xE7FF18, 0xA0FF60, 0x6BFF94, 
  0x5FFFA1, 0x8FFF70, 0xD1FF2E, 0xFFFF00, 0xFFFE00, 0xFFF708, 0xFFEA15, 0xFFD52A, 0xFFB847, 0xFF916E, 0xFF60A0, 0xFF1BE4, 0xFF00FF, 0xFD01FF, 0xF40CFF, 0xE11EFF
};

const long ColorGradient_05[] PROGMEM = 
{
  0xCD33FF, 0xE619FF, 0xF60AFF, 0xFD01FF, 0xFF00FF, 0xFF24DB, 0xFF6898, 0xFF9768, 0xFFBD43, 0xFFD827, 0xFFEC13, 0xFFF907, 0xFFFF00, 0xFFFF00, 0xC6FF3A, 0x85FF7B, 
  0x76FF8A, 0xB0FF50, 0xF5FF09, 0xFFFF00, 0xFFFB04, 0xFFF10E, 0xFFDF1F, 0xFFC639, 0xFFA45B, 0xFF7788, 0xFF3AC5, 0xFF00FF, 0xFF00FF, 0xF906FF, 0xEC13FF, 0xD52AFF, 
  0xDC24FF, 0xF10EFF, 0xFB03FF, 0xFF00FF, 0xFF0BF5, 0xFF4FB0, 0xFF857A, 0xFFAE51, 0xFFCE31, 0xFFE51A, 0xFFF50A, 0xFFFD01, 0xFFFF00, 0xE4FF1B, 0x9EFF62, 0x69FF96, 
  0x5DFFA2, 0x8EFF71, 0xD0FF2F, 0xFFFF00, 0xFFFE00, 0xFFF807, 0xFFEA15, 0xFFD62A, 0xFFB947, 0xFF926D, 0xFF619E, 0xFF1CE4, 0xFF00FF, 0xFD00FF, 0xF40BFF, 0xE21DFF, 
  0xE818FF, 0xF708FF, 0xFE00FF, 0xFF00FF, 0xFF30D0, 0xFF718F, 0xFF9E61, 0xFFC23D, 0xFFDC22, 0xFFEF10, 0xFFFB05, 0xFFFF00, 0xFCFF03, 0xBBFF45, 0x80FF7F, 0x53FFAD, 
  0x49FFB6, 0x73FF8D, 0xA7FF58, 0xEDFF12, 0xFFFF00, 0xFFFD03, 0xFFF30C, 0xFFE21D, 0xFFCA35, 0xFFA956, 0xFF7E81, 0xFF44BB, 0xFF03FB, 0xFF00FF, 0xFA05FF, 0xEC13FF, 
  0xF00FFF, 0xFC02FF, 0xFF00FF, 0xFF12ED, 0xFF57A8, 0xFF8B74, 0xFFB34C, 0xFFD22D, 0xFFE817, 0xFFF609, 0xFFFE00, 0xFFFF00, 0xDBFF24, 0x97FF69, 0x67FF98, 0x3FFFC0, 
  0x37FFC9, 0x5BFFA4, 0x88FF77, 0xC6FF39, 0xFFFF00, 0xFFFF00, 0xFFF906, 0xFFED13, 0xFFD926, 0xFFBD42, 0xFF9867, 0xFF6897, 0xFF24DB, 0xFF00FF, 0xFD00FF, 0xF30BFF, 
  0xF708FF, 0xFE00FF, 0xFF00FF, 0xFF39C6, 0xFF7788, 0xFFA35C, 0xFFC639, 0xFFDF20, 0xFFF10E, 0xFFFC04, 0xFFFF00, 0xF6FF09, 0xB1FF4E, 0x7BFF85, 0x50FFAF, 0x2FFFD0, 
  0x28FFD7, 0x47FFB9, 0x6EFF91, 0x9FFF60, 0xE5FF1B, 0xFFFF00, 0xFFFD01, 0xFFF40B, 0xFFE51A, 0xFFCE32, 0xFFAE51, 0xFF847B, 0xFF4EB2, 0xFF09F6, 0xFF00FF, 0xFA06FF, 
  0xFB02FF, 0xFF00FF, 0xFF1AE5, 0xFF60A0, 0xFF916E, 0xFFB847, 0xFFD52A, 0xFFEA15, 0xFFF808, 0xFFFF00, 0xFFFF00, 0xD2FF2E, 0x90FF70, 0x62FF9D, 0x3EFFC2, 0x22FFDE, 
  0x1BFFE3, 0x35FFCA, 0x57FFA8, 0x82FF7D, 0xBCFF43, 0xFDFF02, 0xFFFF00, 0xFFFB06, 0xFFEF10, 0xFFDC23, 0xFFC13E, 0xFF9D62, 0xFF6F90, 0xFF2ED2, 0xFF00FF, 0xFD00FF, 
  0xFE00FF, 0xFF03FD, 0xFF43BC, 0xFF7D82, 0xFFA856, 0xFFCA36, 0xFFE21D, 0xFFF30D, 0xFFFC03, 0xFFFF00, 0xEEFF11, 0xA9FF57, 0x75FF8B, 0x4CFFB3, 0x2DFFD2, 0x16FFE9, 
  0x12FFEE, 0x26FFD9, 0x43FFBC, 0x68FF97, 0x98FF68, 0xDCFF23, 0xFFFF00, 0xFFFE00, 0xFFF609, 0xFFE718, 0xFFD22E, 0xFFB34D, 0xFF8A75, 0xFF56A9, 0xFF11EE, 0xFE00FF, 
  0xFE00FF, 0xFF24DC, 0xFF6798, 0xFF9768, 0xFFBD43, 0xFFD926, 0xFFEC12, 0xFFF906, 0xFFFF00, 0xFFFF00, 0xC7FF38, 0x89FF77, 0x5DFFA3, 0x3AFFC6, 0x1FFFE0, 0x0DFFF2, 
  0x0AFFF5, 0x19FFE5, 0x31FFCE, 0x51FFAE, 0x7AFF86, 0xB1FF4E, 0xF4FF0A, 0xFFFF00, 0xFFFC04, 0xFFF10E, 0xFFDF20, 0xFFC639, 0xFFA45B, 0xFF7887, 0xFF3AC5, 0xFF01FE
};

const long ColorGradient_06[] PROGMEM = 
{
  0xFE00FF, 0xFF07F9, 0xFF47B8, 0xFF807F, 0xFFAB55, 0xFFCB34, 0xFFE21C, 0xFFF30D, 0xFFFC03, 0xFFFF00, 0xEBFF15, 0xA5FF5A, 0x72FF8D, 0x4BFFB5, 0x2CFFD3, 0x16FFEA, 
  0x10FFEF, 0x24FFDB, 0x40FFBF, 0x65FF9A, 0x94FF6C, 0xD6FF29, 0xFFFF00, 0xFFFE00, 0xFFF608, 0xFFE916, 0xFFD42C, 0xFFB64A, 0xFF8E71, 0xFF5CA4, 0xFF16E9, 0xFE00FF, 
  0xFE00FF, 0xFF29D6, 0xFF6C93, 0xFF9A65, 0xFFBF40, 0xFFDA25, 0xFFEE11, 0xFFFA06, 0xFFFF00, 0xFFFF00, 0xC1FF3E, 0x85FF7A, 0x59FFA6, 0x37FFC8, 0x1EFFE1, 0x0CFFF3, 
  0x09FFF6, 0x19FFE7, 0x2FFFD0, 0x4FFFB1, 0x77FF88, 0xADFF53, 0xF2FF0D, 0xFFFF00, 0xFFFC04, 0xFFF20E, 0xFFE11E, 0xFFC837, 0xFFA659, 0xFF7A85, 0xFF3EC1, 0xFF01FF, 
  0xFF0EF2, 0xFF52AD, 0xFF8878, 0xFFB14E, 0xFFD02F, 0xFFE619, 0xFFF50A, 0xFFFD00, 0xFFFF00, 0xE0FF1F, 0x9BFF65, 0x6BFF94, 0x45FFBB, 0x28FFD7, 0x14FFEC, 0x07FFF9, 
  0x04FFFB, 0x0FFFF0, 0x21FFDE, 0x3CFFC3, 0x5FFFA0, 0x8CFF73, 0xCCFF33, 0xFFFF00, 0xFFFF00, 0xFFF907, 0xFFEB14, 0xFFD728, 0xFFBA45, 0xFF946B, 0xFF639D, 0xFF20DF, 
  0xFF32CD, 0xFF718E, 0xFFA05F, 0xFFC33C, 0xFFDE22, 0xFFF00F, 0xFFFB05, 0xFFFF00, 0xFAFF05, 0xB7FF48, 0x7FFF81, 0x54FFAB, 0x34FFCC, 0x1CFFE4, 0x0CFFF4, 0x03FFFD, 
  0x01FFFE, 0x08FFF7, 0x16FFE9, 0x2CFFD3, 0x4AFFB5, 0x72FF8E, 0xA4FF5B, 0xEAFF15, 0xFFFF00, 0xFFFC02, 0xFFF30C, 0xFFE31B, 0xFFCC34, 0xFFAB54, 0xFF7F80, 0xFF44BB, 
  0xFF54AB, 0xFF8C73, 0xFFB54A, 0xFFD32C, 0xFFE916, 0xFFF709, 0xFFFE00, 0xFFFF00, 0xD7FF28, 0x94FF6C, 0x65FF9A, 0x40FFBF, 0x25FFDA, 0x11FFEE, 0x05FFFA, 0x00FFFF, 
  0x00FFFF, 0x03FFFC, 0x0DFFF2, 0x1EFFE1, 0x38FFC7, 0x5AFFA5, 0x85FF7A, 0xC3FF3D, 0xFFFF00, 0xFFFF00, 0xFFFA06, 0xFFED12, 0xFFDA25, 0xFFBF41, 0xFF9867, 0xFF639C, 
  0xFF728E, 0xFFA45C, 0xFFC838, 0xFFE01F, 0xFFF20E, 0xFFFC04, 0xFFFF00, 0xF3FF0C, 0xAEFF51, 0x78FF87, 0x50FFB0, 0x30FFCF, 0x19FFE6, 0x0AFFF5, 0x01FFFD, 0x00FFFF, 
  0x02FCFF, 0x00FFFF, 0x08FFF8, 0x14FFEB, 0x28FFD6, 0x46FFBA, 0x6CFF93, 0x9CFF63, 0xE1FF1E, 0xFFFF00, 0xFFFD01, 0xFFF50A, 0xFFE619, 0xFFCF30, 0xFFAF51, 0xFF807F, 
  0xFF8D72, 0xFFB947, 0xFFD629, 0xFFEB14, 0xFFF808, 0xFFFE00, 0xFFFF00, 0xCDFF32, 0x8DFF73, 0x60FFA0, 0x3CFFC3, 0x22FFDD, 0x0FFFF0, 0x05FFFB, 0x00FFFF, 0x0CF3FF, 
  0x1BE4FF, 0x00FFFF, 0x02FFFD, 0x0CFFF4, 0x1CFFE3, 0x34FFCB, 0x55FFAA, 0x7FFF80, 0xB9FF47, 0xFBFF04, 0xFFFF00, 0xFFFB05, 0xFFF010, 0xFFDD22, 0xFFC23E, 0xFF9966, 
  0xFFA45B, 0xFFCA35, 0xFFE31C, 0xFFF30C, 0xFFFD02, 0xFFFF00, 0xEBFF14, 0xA5FF5A, 0x72FF8D, 0x4BFFB5, 0x2CFFD3, 0x17FFE9, 0x09FFF7, 0x00FFFE, 0x00FFFF, 0x2DD2FF, 
  0x44BCFF, 0x02FCFF, 0x00FFFF, 0x06FFFA, 0x12FFED, 0x24FFDB, 0x40FFBF, 0x65FF9A, 0x93FF6C, 0xD6FF29, 0xFFFF00, 0xFFFE00, 0xFFF709, 0xFFE916, 0xFFD22D, 0xFFB04F
};

const long ColorGradient_07[] PROGMEM = 
{
  0xFF8D72, 0xFFB947, 0xFFD728, 0xFFEB14, 0xFFF808, 0xFFFF00, 0xFFFF00, 0xCCFF34, 0x8CFF73, 0x5FFFA0, 0x3DFFC3, 0x21FFDE, 0x10FFEF, 0x05FFFB, 0x00FFFF, 0x0DF1FF, 
  0x1DE1FF, 0x00FFFF, 0x01FFFD, 0x0BFFF4, 0x1BFFE4, 0x33FFCC, 0x53FFAC, 0x7DFF82, 0xB5FF4A, 0xF9FF07, 0xFFFF00, 0xFFFB04, 0xFFF00F, 0xFFDE21, 0xFFC33C, 0xFF9B65, 
  0xFFA659, 0xFFCB34, 0xFFE41B, 0xFFF40B, 0xFFFD02, 0xFFFF00, 0xE8FF17, 0xA2FF5D, 0x70FF8F, 0x49FFB6, 0x2BFFD4, 0x16FFE9, 0x08FFF7, 0x00FFFE, 0x00FFFF, 0x31CFFF, 
  0x45BAFF, 0x02FDFF, 0x00FFFF, 0x06FFFA, 0x11FFEE, 0x24FFDB, 0x3FFFC0, 0x64FF9B, 0x93FF6D, 0xD5FF2B, 0xFFFF00, 0xFFFE00, 0xFFF708, 0xFFE915, 0xFFD32D, 0xFFB14F, 
  0xFFBB45, 0xFFDA25, 0xFFEE11, 0xFFFA06, 0xFFFF00, 0xFEFF01, 0xC0FF3F, 0x84FF7B, 0x58FFA7, 0x37FFC8, 0x1EFFE1, 0x0DFFF2, 0x03FFFC, 0x00FFFF, 0x0FEFFF, 0x59A6FF, 
  0x6A95FF, 0x21DEFF, 0x00FFFF, 0x00FFFE, 0x0AFFF5, 0x18FFE7, 0x2FFFD0, 0x4EFFB1, 0x77FF88, 0xACFF54, 0xF1FF0E, 0xFFFF00, 0xFFFC03, 0xFFF20D, 0xFFE01F, 0xFFC33C, 
  0xFFCB34, 0xFFE619, 0xFFF509, 0xFFFE00, 0xFFFF00, 0xDFFF20, 0x9AFF65, 0x6AFF95, 0x45FFBB, 0x28FFD8, 0x13FFEC, 0x07FFF8, 0x00FFFF, 0x00FFFF, 0x35CAFF, 0x7887FF, 
  0x8579FF, 0x4AB5FF, 0x05F9FF, 0x00FFFF, 0x05FFFB, 0x0FFFF0, 0x21FFDE, 0x3BFFC4, 0x5FFFA1, 0x8BFF74, 0xCBFF34, 0xFFFF00, 0xFFFF00, 0xFFF807, 0xFFEA14, 0xFFD32C, 
  0xFFDA25, 0xFFEF10, 0xFFFB05, 0xFFFF00, 0xF9FF06, 0xB6FF4A, 0x7EFF81, 0x54FFAC, 0x33FFCC, 0x1BFFE4, 0x0BFFF4, 0x01FFFD, 0x00FFFF, 0x16E9FF, 0x5DA2FF, 0x926DFF, 
  0x9E61FF, 0x6D92FF, 0x29D6FF, 0x00FFFF, 0x00FFFF, 0x08FFF7, 0x16FFE9, 0x2CFFD4, 0x4AFFB6, 0x71FF8E, 0xA3FF5D, 0xE9FF16, 0xFFFF00, 0xFFFD02, 0xFFF30C, 0xFFE01F, 
  0xFFE619, 0xFFF609, 0xFFFE00, 0xFFFF00, 0xD6FF29, 0x93FF6C, 0x65FF9A, 0x40FFBF, 0x25FFDB, 0x11FFEE, 0x06FFFA, 0x00FFFF, 0x00FFFF, 0x3EC1FF, 0x7B84FF, 0xA956FF, 
  0xB34CFF, 0x8877FF, 0x52ADFF, 0x0DF2FF, 0x00FFFF, 0x03FFFC, 0x0DFFF2, 0x1EFFE1, 0x38FFC8, 0x59FFA6, 0x85FF7A, 0xC1FF3E, 0xFEFF00, 0xFFFF00, 0xFFF906, 0xFFEB14, 
  0xFFEF10, 0xFFFC04, 0xFFFF00, 0xF2FF0D, 0xADFF53, 0x77FF88, 0x4FFFB1, 0x2FFFD0, 0x18FFE6, 0x0AFFF5, 0x00FFFE, 0x00FFFF, 0x1FE0FF, 0x649BFF, 0x956AFF, 0xBD42FF, 
  0xC63AFF, 0xA05FFF, 0x738CFF, 0x33CDFF, 0x00FFFF, 0x00FFFF, 0x07FFF8, 0x14FFEB, 0x28FFD7, 0x45FFBA, 0x6BFF94, 0x9BFF64, 0xE1FF1E, 0xFFFF00, 0xFFFD01, 0xFFF30C, 
  0xFFF609, 0xFFFE00, 0xFFFF00, 0xCCFF33, 0x8CFF73, 0x5FFFA0, 0x3CFFC4, 0x21FFDE, 0x0FFFF0, 0x05FFFB, 0x00FFFF, 0x05F9FF, 0x48B7FF, 0x817EFF, 0xAC54FF, 0xCE32FF, 
  0xD629FF, 0xB649FF, 0x8F70FF, 0x5DA3FF, 0x17E7FF, 0x00FFFF, 0x02FFFD, 0x0CFFF4, 0x1BFFE4, 0x33FFCC, 0x53FFAC, 0x7DFF82, 0xB5FF4A, 0xF8FF07, 0xFFFF00, 0xFFF907
};

// YingYang
const long YingYang_00[] PROGMEM = 
{
  0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 
  0xFFFFFF, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0xFFFFFF, 
  0xFFFFFF, 0x000000, 0x000000, 0x000000, 0xFEFEFE, 0xFEFEFE, 0xFEFEFE, 0xFEFEFE, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0xFFFFFF, 
  0xFFFFFF, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0xFEFEFE, 0xFEFEFE, 0xFEFEFE, 0xFEFEFE, 0xFEFEFE, 0xFEFEFE, 0x000000, 0x000000, 0xFFFFFF, 
  0xFFFFFF, 0x000000, 0x000000, 0xFEFEFE, 0xFEFEFE, 0xFEFEFE, 0x000000, 0x000000, 0xFEFEFE, 0xFEFEFE, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0xFFFFFF, 
  0xFFFFFF, 0x000000, 0x000000, 0x000000, 0x000000, 0xFEFEFE, 0xFEFEFE, 0xFEFEFE, 0x000000, 0x000000, 0xFEFEFE, 0xFEFEFE, 0xFEFEFE, 0xFEFEFE, 0x000000, 0xFFFFFF, 
  0xFFFFFF, 0x000000, 0xFEFEFE, 0xFEFEFE, 0xFEFEFE, 0xFEFEFE, 0xFEFEFE, 0xFEFEFE, 0xFEFEFE, 0xFEFEFE, 0xFEFEFE, 0x000000, 0x000000, 0x000000, 0x000000, 0xFFFFFF, 
  0xFFFFFF, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0xFEFEFE, 0xFEFEFE, 0xFEFEFE, 0xFEFEFE, 0xFEFEFE, 0xFEFEFE, 0xFEFEFE, 0xFEFEFE, 0x000000, 0xFFFFFF, 
  0xFFFFFF, 0x000000, 0xFEFEFE, 0xFEFEFE, 0xFEFEFE, 0xFEFEFE, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0xFFFFFF, 
  0xFFFFFF, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0xFEFEFE, 0xFEFEFE, 0xFEFEFE, 0x000000, 0xFFFFFF, 
  0xFFFFFF, 0x000000, 0xFEFEFE, 0xFEFEFE, 0x000000, 0x000000, 0x000000, 0xFEFEFE, 0xFEFEFE, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0xFFFFFF, 
  0xFFFFFF, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0xFEFEFE, 0xFEFEFE, 0x000000, 0x000000, 0x000000, 0xFEFEFE, 0x000000, 0x000000, 0xFFFFFF, 
  0xFFFFFF, 0x000000, 0x000000, 0xFEFEFE, 0xFEFEFE, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0xFFFFFF, 
  0xFFFFFF, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0xFEFEFE, 0xFEFEFE, 0x000000, 0x000000, 0x000000, 0xFFFFFF, 
  0xFFFFFF, 0x000000, 0x000000, 0xFEFEFE, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0xFFFFFF, 
  0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF
};

const long YingYang_01[] PROGMEM = 
{
  0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 
  0xFFFFFF, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0xFFFFFF, 
  0xFFFFFF, 0x000000, 0x000000, 0x000000, 0xFEFEFE, 0xFEFEFE, 0xFEFEFE, 0xFEFEFE, 0xFEFEFE, 0xFEFEFE, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0xFFFFFF, 
  0xFFFFFF, 0x000000, 0x000000, 0x000000, 0x000000, 0xFEFEFE, 0xFEFEFE, 0xFEFEFE, 0xFEFEFE, 0xFEFEFE, 0xFEFEFE, 0xFEFEFE, 0xFEFEFE, 0x000000, 0x000000, 0xFFFFFF, 
  0xFFFFFF, 0x000000, 0x000000, 0xFEFEFE, 0xFEFEFE, 0xFEFEFE, 0xFEFEFE, 0xFEFEFE, 0xFEFEFE, 0xFEFEFE, 0xFEFEFE, 0xFEFEFE, 0x000000, 0x000000, 0x000000, 0xFFFFFF, 
  0xFFFFFF, 0x000000, 0x000000, 0x000000, 0xFEFEFE, 0xFEFEFE, 0x000000, 0x000000, 0xFEFEFE, 0xFEFEFE, 0xFEFEFE, 0xFEFEFE, 0xFEFEFE, 0xFEFEFE, 0x000000, 0xFFFFFF, 
  0xFFFFFF, 0x000000, 0xFEFEFE, 0xFEFEFE, 0xFEFEFE, 0xFEFEFE, 0xFEFEFE, 0xFEFEFE, 0x000000, 0x000000, 0xFEFEFE, 0xFEFEFE, 0x000000, 0x000000, 0x000000, 0xFFFFFF, 
  0xFFFFFF, 0x000000, 0x000000, 0x000000, 0xFEFEFE, 0xFEFEFE, 0xFEFEFE, 0xFEFEFE, 0xFEFEFE, 0xFEFEFE, 0xFEFEFE, 0xFEFEFE, 0xFEFEFE, 0xFEFEFE, 0x000000, 0xFFFFFF, 
  0xFFFFFF, 0x000000, 0xFEFEFE, 0xFEFEFE, 0x000000, 0x000000, 0x000000, 0xFEFEFE, 0xFEFEFE, 0xFEFEFE, 0xFEFEFE, 0xFEFEFE, 0x000000, 0x000000, 0x000000, 0xFFFFFF, 
  0xFFFFFF, 0x000000, 0x000000, 0x000000, 0x000000, 0xFEFEFE, 0xFEFEFE, 0xFEFEFE, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0xFEFEFE, 0x000000, 0xFFFFFF, 
  0xFFFFFF, 0x000000, 0xFEFEFE, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0xFFFFFF, 
  0xFFFFFF, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0xFEFEFE, 0xFEFEFE, 0x000000, 0x000000, 0x000000, 0x000000, 0xFFFFFF, 
  0xFFFFFF, 0x000000, 0x000000, 0x000000, 0x000000, 0xFEFEFE, 0xFEFEFE, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0xFFFFFF, 
  0xFFFFFF, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0xFFFFFF, 
  0xFFFFFF, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0xFFFFFF, 
  0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF
};

// Heart
const long Heart_00[] PROGMEM = 
{
  0x000907, 0x000907, 0x000907, 0x000907, 0x000907, 0x000907, 0x000907, 0x000907, 0x000907, 0x000907, 0x000907, 0x000907, 0x000907, 0x000907, 0x000907, 0x000907, 
  0x000907, 0x000907, 0x000907, 0x000907, 0x000907, 0x000907, 0x000907, 0x000907, 0x000907, 0x000907, 0x000907, 0x000907, 0x000907, 0x000907, 0x000907, 0x000907, 
  0x000907, 0x000907, 0x000907, 0x000907, 0xA90000, 0xA90000, 0xA90000, 0x000907, 0x000907, 0x000907, 0x000907, 0x000907, 0xA90000, 0xA90000, 0x000907, 0x000907, 
  0x000907, 0xA90000, 0xA90000, 0xA90000, 0xA90000, 0x000907, 0x000907, 0x000907, 0xA90000, 0xA90000, 0xA90000, 0xA90000, 0xA90000, 0x000907, 0x000907, 0x000907, 
  0x000907, 0x000907, 0xA90000, 0xA90000, 0xFEFEFE, 0xA90000, 0xA90000, 0xA90000, 0xA90000, 0x000907, 0xA90000, 0xA90000, 0xA90000, 0xA90000, 0xA90000, 0xA90000, 
  0xA90000, 0xA90000, 0xA90000, 0xA90000, 0xA90000, 0xA90000, 0xA90000, 0xA90000, 0xA90000, 0xA90000, 0xA90000, 0xA90000, 0xFEFEFE, 0xA90000, 0xA90000, 0x000907, 
  0x000907, 0xA90000, 0xFEFEFE, 0xA90000, 0xA90000, 0xA90000, 0xA90000, 0xA90000, 0xA90000, 0xA90000, 0xA90000, 0xA90000, 0xA90000, 0xA90000, 0xA90000, 0xA90000, 
  0xA90000, 0xA90000, 0xA90000, 0xA90000, 0xA90000, 0xA90000, 0xA90000, 0xA90000, 0xA90000, 0xA90000, 0xA90000, 0xA90000, 0xA90000, 0xFEFEFE, 0xA90000, 0x000907, 
  0x000907, 0xA90000, 0xA90000, 0xA90000, 0xA90000, 0xA90000, 0xA90000, 0xA90000, 0xA90000, 0xA90000, 0xA90000, 0xA90000, 0xA90000, 0xA90000, 0xA90000, 0xA90000, 
  0xA90000, 0xA90000, 0xA90000, 0xA90000, 0xA90000, 0xA90000, 0xA90000, 0xA90000, 0xA90000, 0xA90000, 0xA90000, 0xA90000, 0xA90000, 0xA90000, 0xA90000, 0x000907, 
  0x000907, 0x000907, 0xA90000, 0xA90000, 0xA90000, 0xA90000, 0xA90000, 0xA90000, 0xA90000, 0xA90000, 0xA90000, 0xA90000, 0xA90000, 0xA90000, 0xA90000, 0x000907, 
  0x000907, 0x000907, 0xA90000, 0xA90000, 0xA90000, 0xA90000, 0xA90000, 0xA90000, 0xA90000, 0xA90000, 0xA90000, 0xA90000, 0xA90000, 0x000907, 0x000907, 0x000907, 
  0x000907, 0x000907, 0x000907, 0x000907, 0xA90000, 0xA90000, 0xA90000, 0xA90000, 0xA90000, 0xA90000, 0xA90000, 0xA90000, 0xA90000, 0x000907, 0x000907, 0x000907, 
  0x000907, 0x000907, 0x000907, 0x000907, 0xA90000, 0xA90000, 0xA90000, 0xA90000, 0xA90000, 0xA90000, 0xA90000, 0x000907, 0x000907, 0x000907, 0x000907, 0x000907, 
  0x000907, 0x000907, 0x000907, 0x000907, 0x000907, 0x000907, 0xA90000, 0xA90000, 0xA90000, 0xA90000, 0xA90000, 0x000907, 0x000907, 0x000907, 0x000907, 0x000907, 
  0x000907, 0x000907, 0x000907, 0x000907, 0x000907, 0x000907, 0xA90000, 0xA90000, 0xA90000, 0x000907, 0x000907, 0x000907, 0x000907, 0x000907, 0x000907, 0x000907
};

const long Heart_01[] PROGMEM = 
{
  0x000907, 0x000907, 0x000907, 0x000907, 0x000907, 0x000907, 0x000907, 0x000907, 0x000907, 0x000907, 0x000907, 0x000907, 0x000907, 0x000907, 0x000907, 0x000907, 
  0x000907, 0x000907, 0x000907, 0x000907, 0x000907, 0x000907, 0x000907, 0x000907, 0x000907, 0x000907, 0x000907, 0x000907, 0x000907, 0x000907, 0x000907, 0x000907, 
  0x000907, 0x000907, 0x000907, 0x000907, 0x55FE55, 0x55FE55, 0x55FE55, 0x000907, 0x000907, 0x000907, 0x000907, 0x000907, 0x55FE55, 0x55FE55, 0x000907, 0x000907, 
  0x000907, 0x55FE55, 0x55FE55, 0x55FE55, 0x55FE55, 0x000907, 0x000907, 0x000907, 0x55FE55, 0x55FE55, 0x55FE55, 0x55FE55, 0x55FE55, 0x000907, 0x000907, 0x000907, 
  0x000907, 0x000907, 0x55FE55, 0x55FE55, 0xFEFEFE, 0x55FE55, 0x55FE55, 0x55FE55, 0x55FE55, 0x000907, 0x55FE55, 0x55FE55, 0x55FE55, 0x55FE55, 0x55FE55, 0x55FE55, 
  0x55FE55, 0x55FE55, 0x55FE55, 0x55FE55, 0x55FE55, 0x55FE55, 0x55FE55, 0x55FE55, 0x55FE55, 0x55FE55, 0x55FE55, 0x55FE55, 0xFEFEFE, 0x55FE55, 0x55FE55, 0x000907, 
  0x000907, 0x55FE55, 0xFEFEFE, 0x55FE55, 0x55FE55, 0x55FE55, 0x55FE55, 0x55FE55, 0x55FE55, 0x55FE55, 0x55FE55, 0x55FE55, 0x55FE55, 0x55FE55, 0x55FE55, 0x55FE55, 
  0x55FE55, 0x55FE55, 0x55FE55, 0x55FE55, 0x55FE55, 0x55FE55, 0x55FE55, 0x55FE55, 0x55FE55, 0x55FE55, 0x55FE55, 0x55FE55, 0x55FE55, 0xFEFEFE, 0x55FE55, 0x000907, 
  0x000907, 0x55FE55, 0x55FE55, 0x55FE55, 0x55FE55, 0x55FE55, 0x55FE55, 0x55FE55, 0x55FE55, 0x55FE55, 0x55FE55, 0x55FE55, 0x55FE55, 0x55FE55, 0x55FE55, 0x55FE55, 
  0x55FE55, 0x55FE55, 0x55FE55, 0x55FE55, 0x55FE55, 0x55FE55, 0x55FE55, 0x55FE55, 0x55FE55, 0x55FE55, 0x55FE55, 0x55FE55, 0x55FE55, 0x55FE55, 0x55FE55, 0x000907, 
  0x000907, 0x000907, 0x55FE55, 0x55FE55, 0x55FE55, 0x55FE55, 0x55FE55, 0x55FE55, 0x55FE55, 0x55FE55, 0x55FE55, 0x55FE55, 0x55FE55, 0x55FE55, 0x55FE55, 0x000907, 
  0x000907, 0x000907, 0x55FE55, 0x55FE55, 0x55FE55, 0x55FE55, 0x55FE55, 0x55FE55, 0x55FE55, 0x55FE55, 0x55FE55, 0x55FE55, 0x55FE55, 0x000907, 0x000907, 0x000907, 
  0x000907, 0x000907, 0x000907, 0x000907, 0x55FE55, 0x55FE55, 0x55FE55, 0x55FE55, 0x55FE55, 0x55FE55, 0x55FE55, 0x55FE55, 0x55FE55, 0x000907, 0x000907, 0x000907, 
  0x000907, 0x000907, 0x000907, 0x000907, 0x55FE55, 0x55FE55, 0x55FE55, 0x55FE55, 0x55FE55, 0x55FE55, 0x55FE55, 0x000907, 0x000907, 0x000907, 0x000907, 0x000907, 
  0x000907, 0x000907, 0x000907, 0x000907, 0x000907, 0x000907, 0x55FE55, 0x55FE55, 0x55FE55, 0x55FE55, 0x55FE55, 0x000907, 0x000907, 0x000907, 0x000907, 0x000907, 
  0x000907, 0x000907, 0x000907, 0x000907, 0x000907, 0x000907, 0x55FE55, 0x55FE55, 0x55FE55, 0x000907, 0x000907, 0x000907, 0x000907, 0x000907, 0x000907, 0x000907
};

const long Heart_02[] PROGMEM = 
{
  0x000907, 0x000907, 0x000907, 0x000907, 0x000907, 0x000907, 0x000907, 0x000907, 0x000907, 0x000907, 0x000907, 0x000907, 0x000907, 0x000907, 0x000907, 0x000907, 
  0x000907, 0x000907, 0x000907, 0x000907, 0x000907, 0x000907, 0x000907, 0x000907, 0x000907, 0x000907, 0x000907, 0x000907, 0x000907, 0x000907, 0x000907, 0x000907, 
  0x000907, 0x000907, 0x000907, 0x000907, 0x0000A9, 0x0000A9, 0x0000A9, 0x000907, 0x000907, 0x000907, 0x000907, 0x000907, 0x0000A9, 0x0000A9, 0x000907, 0x000907, 
  0x000907, 0x0000A9, 0x0000A9, 0x0000A9, 0x0000A9, 0x000907, 0x000907, 0x000907, 0x0000A9, 0x0000A9, 0x0000A9, 0x0000A9, 0x0000A9, 0x000907, 0x000907, 0x000907, 
  0x000907, 0x000907, 0x0000A9, 0x0000A9, 0xFEFEFE, 0x0000A9, 0x0000A9, 0x0000A9, 0x0000A9, 0x000907, 0x0000A9, 0x0000A9, 0x0000A9, 0x0000A9, 0x0000A9, 0x0000A9, 
  0x0000A9, 0x0000A9, 0x0000A9, 0x0000A9, 0x0000A9, 0x0000A9, 0x0000A9, 0x0000A9, 0x0000A9, 0x0000A9, 0x0000A9, 0x0000A9, 0xFEFEFE, 0x0000A9, 0x0000A9, 0x000907, 
  0x000907, 0x0000A9, 0xFEFEFE, 0x0000A9, 0x0000A9, 0x0000A9, 0x0000A9, 0x0000A9, 0x0000A9, 0x0000A9, 0x0000A9, 0x0000A9, 0x0000A9, 0x0000A9, 0x0000A9, 0x0000A9, 
  0x0000A9, 0x0000A9, 0x0000A9, 0x0000A9, 0x0000A9, 0x0000A9, 0x0000A9, 0x0000A9, 0x0000A9, 0x0000A9, 0x0000A9, 0x0000A9, 0x0000A9, 0xFEFEFE, 0x0000A9, 0x000907, 
  0x000907, 0x0000A9, 0x0000A9, 0x0000A9, 0x0000A9, 0x0000A9, 0x0000A9, 0x0000A9, 0x0000A9, 0x0000A9, 0x0000A9, 0x0000A9, 0x0000A9, 0x0000A9, 0x0000A9, 0x0000A9, 
  0x0000A9, 0x0000A9, 0x0000A9, 0x0000A9, 0x0000A9, 0x0000A9, 0x0000A9, 0x0000A9, 0x0000A9, 0x0000A9, 0x0000A9, 0x0000A9, 0x0000A9, 0x0000A9, 0x0000A9, 0x000907, 
  0x000907, 0x000907, 0x0000A9, 0x0000A9, 0x0000A9, 0x0000A9, 0x0000A9, 0x0000A9, 0x0000A9, 0x0000A9, 0x0000A9, 0x0000A9, 0x0000A9, 0x0000A9, 0x0000A9, 0x000907, 
  0x000907, 0x000907, 0x0000A9, 0x0000A9, 0x0000A9, 0x0000A9, 0x0000A9, 0x0000A9, 0x0000A9, 0x0000A9, 0x0000A9, 0x0000A9, 0x0000A9, 0x000907, 0x000907, 0x000907, 
  0x000907, 0x000907, 0x000907, 0x000907, 0x0000A9, 0x0000A9, 0x0000A9, 0x0000A9, 0x0000A9, 0x0000A9, 0x0000A9, 0x0000A9, 0x0000A9, 0x000907, 0x000907, 0x000907, 
  0x000907, 0x000907, 0x000907, 0x000907, 0x0000A9, 0x0000A9, 0x0000A9, 0x0000A9, 0x0000A9, 0x0000A9, 0x0000A9, 0x000907, 0x000907, 0x000907, 0x000907, 0x000907, 
  0x000907, 0x000907, 0x000907, 0x000907, 0x000907, 0x000907, 0x0000A9, 0x0000A9, 0x0000A9, 0x0000A9, 0x0000A9, 0x000907, 0x000907, 0x000907, 0x000907, 0x000907, 
  0x000907, 0x000907, 0x000907, 0x000907, 0x000907, 0x000907, 0x0000A9, 0x0000A9, 0x0000A9, 0x000907, 0x000907, 0x000907, 0x000907, 0x000907, 0x000907, 0x000907
};

const long Heart_03[] PROGMEM = 
{
  0x000907, 0x000907, 0x000907, 0x000907, 0x000907, 0x000907, 0x000907, 0x000907, 0x000907, 0x000907, 0x000907, 0x000907, 0x000907, 0x000907, 0x000907, 0x000907, 
  0x000907, 0x000907, 0x000907, 0x000907, 0x000907, 0x000907, 0x000907, 0x000907, 0x000907, 0x000907, 0x000907, 0x000907, 0x000907, 0x000907, 0x000907, 0x000907, 
  0x000907, 0x000907, 0x000907, 0x000907, 0xFE55FE, 0xFE55FE, 0xFE55FE, 0x000907, 0x000907, 0x000907, 0x000907, 0x000907, 0xFE55FE, 0xFE55FE, 0x000907, 0x000907, 
  0x000907, 0xFE55FE, 0xFE55FE, 0xFE55FE, 0xFE55FE, 0x000907, 0x000907, 0x000907, 0xFE55FE, 0xFE55FE, 0xFE55FE, 0xFE55FE, 0xFE55FE, 0x000907, 0x000907, 0x000907, 
  0x000907, 0x000907, 0xFE55FE, 0xFE55FE, 0xFEFEFE, 0xFE55FE, 0xFE55FE, 0xFE55FE, 0xFE55FE, 0x000907, 0xFE55FE, 0xFE55FE, 0xFE55FE, 0xFE55FE, 0xFE55FE, 0xFE55FE, 
  0xFE55FE, 0xFE55FE, 0xFE55FE, 0xFE55FE, 0xFE55FE, 0xFE55FE, 0xFE55FE, 0xFE55FE, 0xFE55FE, 0xFE55FE, 0xFE55FE, 0xFE55FE, 0xFEFEFE, 0xFE55FE, 0xFE55FE, 0x000907, 
  0x000907, 0xFE55FE, 0xFEFEFE, 0xFE55FE, 0xFE55FE, 0xFE55FE, 0xFE55FE, 0xFE55FE, 0xFE55FE, 0xFE55FE, 0xFE55FE, 0xFE55FE, 0xFE55FE, 0xFE55FE, 0xFE55FE, 0xFE55FE, 
  0xFE55FE, 0xFE55FE, 0xFE55FE, 0xFE55FE, 0xFE55FE, 0xFE55FE, 0xFE55FE, 0xFE55FE, 0xFE55FE, 0xFE55FE, 0xFE55FE, 0xFE55FE, 0xFE55FE, 0xFEFEFE, 0xFE55FE, 0x000907, 
  0x000907, 0xFE55FE, 0xFE55FE, 0xFE55FE, 0xFE55FE, 0xFE55FE, 0xFE55FE, 0xFE55FE, 0xFE55FE, 0xFE55FE, 0xFE55FE, 0xFE55FE, 0xFE55FE, 0xFE55FE, 0xFE55FE, 0xFE55FE, 
  0xFE55FE, 0xFE55FE, 0xFE55FE, 0xFE55FE, 0xFE55FE, 0xFE55FE, 0xFE55FE, 0xFE55FE, 0xFE55FE, 0xFE55FE, 0xFE55FE, 0xFE55FE, 0xFE55FE, 0xFE55FE, 0xFE55FE, 0x000907, 
  0x000907, 0x000907, 0xFE55FE, 0xFE55FE, 0xFE55FE, 0xFE55FE, 0xFE55FE, 0xFE55FE, 0xFE55FE, 0xFE55FE, 0xFE55FE, 0xFE55FE, 0xFE55FE, 0xFE55FE, 0xFE55FE, 0x000907, 
  0x000907, 0x000907, 0xFE55FE, 0xFE55FE, 0xFE55FE, 0xFE55FE, 0xFE55FE, 0xFE55FE, 0xFE55FE, 0xFE55FE, 0xFE55FE, 0xFE55FE, 0xFE55FE, 0x000907, 0x000907, 0x000907, 
  0x000907, 0x000907, 0x000907, 0x000907, 0xFE55FE, 0xFE55FE, 0xFE55FE, 0xFE55FE, 0xFE55FE, 0xFE55FE, 0xFE55FE, 0xFE55FE, 0xFE55FE, 0x000907, 0x000907, 0x000907, 
  0x000907, 0x000907, 0x000907, 0x000907, 0xFE55FE, 0xFE55FE, 0xFE55FE, 0xFE55FE, 0xFE55FE, 0xFE55FE, 0xFE55FE, 0x000907, 0x000907, 0x000907, 0x000907, 0x000907, 
  0x000907, 0x000907, 0x000907, 0x000907, 0x000907, 0x000907, 0xFE55FE, 0xFE55FE, 0xFE55FE, 0xFE55FE, 0xFE55FE, 0x000907, 0x000907, 0x000907, 0x000907, 0x000907, 
  0x000907, 0x000907, 0x000907, 0x000907, 0x000907, 0x000907, 0xFE55FE, 0xFE55FE, 0xFE55FE, 0x000907, 0x000907, 0x000907, 0x000907, 0x000907, 0x000907, 0x000907
};

// Landscape
const long Landscape_00[] PROGMEM = 
{
  0x48E4AF, 0x40EDAB, 0x39F5A8, 0x41ECAC, 0x45E7AE, 0x4BE1B0, 0x5CCEB8, 0x5AD1B6, 0x4DDFB1, 0x43E9AD, 0x40EEAB, 0x47E7AE, 0x4BE1B0, 0x50DAB3, 0x44E8AE, 0x3FEEAB, 
  0x7BADC5, 0x77B2C3, 0x7EAAC6, 0x73B5C1, 0x69C0BD, 0x6FBABF, 0x66C3BC, 0x6EBBBF, 0x84A3C9, 0x9096CE, 0x8D98CD, 0x889FCA, 0x7BACC5, 0x6EBAC0, 0x6CBDBF, 0x68C1BD, 
  0x77B1C3, 0x7AAEC5, 0x879FCA, 0x8C9ACC, 0x9293CF, 0x958FD1, 0x9591D0, 0x9490D1, 0x9095CE, 0x8C9ACC, 0x9095CE, 0x83A3C9, 0x7FA8C7, 0x7DABC6, 0x81A6C7, 0x86A1CA, 
  0x7AAEC5, 0x76B2C3, 0x7AAEC4, 0x80A7C7, 0x9194CF, 0x978ED1, 0x9095CE, 0x8E97CD, 0x889FCB, 0x85A2C9, 0x879FCA, 0x85A3C9, 0x80A7C7, 0x81A6C7, 0x7DAAC6, 0x79AFC4, 
  0x79AEC4, 0x7BACC5, 0x7DABC6, 0x7FA8C7, 0x80A7C7, 0x84A3C9, 0x86A1CA, 0x9195CE, 0x9491D0, 0x9194CF, 0x8E98CD, 0x8F97CE, 0x8A9DCC, 0x879FCA, 0x81A6C8, 0x73B6C2, 
  0x899DCB, 0x9195CF, 0x8E97CE, 0x8D99CD, 0x8E97CE, 0x9A89D3, 0x968FD1, 0x968FD1, 0x998CD2, 0x9194CF, 0x899DCB, 0x9590D1, 0x9C89D3, 0x889DCB, 0x7DABC6, 0x7BADC5, 
  0x83A3C8, 0x87A0CA, 0x9293D0, 0x9B89D3, 0x9C88D3, 0x8F96CE, 0x8F96CE, 0x8E97CE, 0x9194CF, 0x9392CF, 0x9392CF, 0x968ED1, 0x9491D0, 0x9096CE, 0x8F97CE, 0x8F96CE, 
  0x9D86D4, 0x9E85D5, 0x9F84D5, 0x9A8BD2, 0x9491D0, 0x8E97CD, 0x9392D0, 0x9490D0, 0x968ED1, 0x988DD2, 0xA083D5, 0xA280D6, 0x9D87D4, 0x9F84D5, 0x9C88D3, 0x9391CF, 
  0x9F84D5, 0x9F85D5, 0x998BD3, 0x988DD1, 0x9B89D3, 0xA380D6, 0x9F85D5, 0x9C88D4, 0x9C88D3, 0x988CD2, 0xA47FD7, 0xAA78DA, 0xAA78DA, 0xA57ED8, 0xA380D6, 0xAA78DA, 
  0xB26FDD, 0xA87AD9, 0xA77CD8, 0xAE74DB, 0xA979D9, 0xA67CD8, 0xAA79DA, 0xA77BD9, 0x9C87D4, 0x9A8BD2, 0xA47FD7, 0xA182D6, 0x9A8AD3, 0x9590D1, 0x9F85D5, 0xAA78DA, 
  0xAD75DB, 0xB46DDE, 0xBA66E0, 0xBB64E1, 0xB071DC, 0xA979D9, 0xA67DD8, 0xA083D5, 0xA47FD7, 0xA182D6, 0xA57DD7, 0xAC77DA, 0xA57ED7, 0xAE74DB, 0xBA67E0, 0xBB66E1, 
  0xB56DDE, 0xB170DD, 0xB270DD, 0xAA79D9, 0xA97BD9, 0xA77CD8, 0xA084D5, 0x9E86D4, 0xAC76DB, 0xB36EDE, 0xAC76DB, 0xB76ADF, 0xC25CE4, 0xC659E5, 0xC35CE5, 0xBD63E2, 
  0xBC63E2, 0xBD63E2, 0xB769DF, 0xB270DD, 0xB56CDF, 0xBB65E1, 0xBB65E1, 0xB967E0, 0xB46CDE, 0xB36EDE, 0xAA78DA, 0xAC76DB, 0xB270DD, 0xB171DD, 0xAE74DB, 0xAA78DA, 
  0xB072DC, 0xB36EDD, 0xB071DC, 0xB171DD, 0xB66BDF, 0xBA65E1, 0xBB65E1, 0xBB65E1, 0xB66ADF, 0xB967E0, 0xC15EE4, 0xBF60E3, 0xB36EDD, 0xAF72DC, 0xB170DD, 0xB66ADF, 
  0xB36DDE, 0xB769E0, 0xC05FE3, 0xC15EE4, 0xC15EE4, 0xBE62E2, 0xBF60E3, 0xBE62E2, 0xB967E0, 0xB66BDF, 0xB869E0, 0xB868E0, 0xB56CDE, 0xB46DDE, 0xB072DC, 0xB072DC, 
  0xB270DD, 0xB56DDE, 0xB56CDE, 0xB66ADF, 0xB967E0, 0xB66ADF, 0xBF5FE3, 0xBF60E3, 0xC45BE5, 0xC45AE5, 0xBF60E3, 0xBB64E1, 0xC05EE4, 0xC35BE5, 0xC45BE5, 0xC05FE3
};

/*const long Landscape_01[] PROGMEM = 
{
  0x41ECAC, 0x4DDFB2, 0x42EAAD, 0x4EDEB1, 0x50DCB3, 0x49E3AF, 0x4BE1B0, 0x61C9BA, 0x51DBB3, 0x40EDAB, 0x46E6AE, 0x54D7B4, 0x4CDFB1, 0x53D7B4, 0x52D9B3, 0x38F5A9, 
  0x75B4C2, 0x7BADC5, 0x81A6C7, 0x7BADC5, 0x75B3C3, 0x70B8C0, 0x64C5BB, 0x76B3C2, 0x9591D0, 0x7CABC5, 0x70BAC0, 0x82A5C8, 0x7EA8C7, 0x76B2C3, 0x71B7C1, 0x6CBDBE, 
  0x73B5C2, 0x70B7C1, 0x75B4C2, 0x77B0C4, 0x80A7C7, 0x8E98CD, 0x9491D0, 0x8B9BCC, 0x8F97CE, 0x9195CF, 0x83A3C8, 0x73B4C2, 0x76B2C3, 0x75B3C2, 0x76B1C3, 0x80A7C7, 
  0x6EBBBF, 0x6DBCBF, 0x6DBCBF, 0x77B1C3, 0x84A3C9, 0x8D99CD, 0x8C9ACC, 0x8A9DCB, 0x81A5C8, 0x83A4C8, 0x84A2C9, 0x7BADC5, 0x7BADC5, 0x72B6C1, 0x6DBCBF, 0x6EBAC0, 
  0x71B7C1, 0x71B8C1, 0x83A4C9, 0x988CD2, 0x8E97CE, 0x7CABC5, 0x7BADC5, 0x84A3C9, 0x889ECB, 0x879FCA, 0x8A9DCB, 0x87A0CA, 0x7FA9C7, 0x82A5C8, 0x7AAEC4, 0x70B9C0, 
  0x9F85D5, 0xA381D6, 0xA182D6, 0x9490D0, 0x8C99CD, 0x8C9ACD, 0x8B9ACC, 0x8B9ACD, 0x8C9ACC, 0x899ECB, 0x8C99CD, 0x9C88D4, 0x9C89D3, 0x9392D0, 0x8A9BCC, 0x899ECB, 
  0xA380D7, 0x9F84D5, 0x998BD2, 0x9B89D3, 0x9D87D4, 0x958FD0, 0x9392D0, 0x9293CF, 0x8D99CD, 0x8F97CE, 0x9D87D4, 0xA67DD8, 0xA979D9, 0xA87AD9, 0xA47FD7, 0xA97AD9, 
  0xAB78DA, 0xA47ED7, 0xA67DD8, 0xB072DC, 0xB072DC, 0xA77BD8, 0xA084D5, 0x9A8AD3, 0x9690D1, 0x9D87D4, 0xAB78DA, 0xA57DD7, 0x9F85D5, 0xA280D6, 0xA77BD8, 0xAF73DC, 
  0xAB77DA, 0xAE74DB, 0xAC76DA, 0xB072DC, 0xBA66E1, 0xBF61E3, 0xB170DD, 0xA979D9, 0xAC76DB, 0xA87AD9, 0xA979D9, 0xAB77DA, 0xAB77DB, 0xA77BD9, 0xAA78DA, 0xB171DC, 
  0xB072DC, 0xB270DD, 0xAE74DC, 0xA57DD8, 0xA87BD9, 0xA97AD9, 0xB46DDE, 0xBC64E2, 0xBF60E3, 0xBE61E2, 0xBB64E1, 0xC35BE5, 0xC25DE4, 0xB170DD, 0xAB77DA, 0xB072DC, 
  0xAD75DB, 0xB171DD, 0xBE61E3, 0xC658E6, 0xBF60E3, 0xBB64E1, 0xC05EE4, 0xC15DE4, 0xBD62E2, 0xBC64E2, 0xB170DD, 0xAF73DC, 0xB170DD, 0xB46DDE, 0xB968E0, 0xB36FDE, 
  0xB171DD, 0xAD75DB, 0xB56CDF, 0xB56CDF, 0xB56CDE, 0xB968E0, 0xB967E0, 0xBB65E1, 0xC05FE3, 0xC15EE4, 0xC15EE3, 0xBE61E3, 0xC25DE4, 0xC35CE5, 0xBD63E2, 0xB56DDE, 
  0xBB65E1, 0xC35BE4, 0xC45AE5, 0xBF60E3, 0xBC64E2, 0xC060E3, 0xC15DE3, 0xC15EE4, 0xC060E3, 0xBD62E2, 0xBF61E3, 0xB967E1, 0xB36EDE, 0xB36EDE, 0xAD75DB, 0xA77CD8, 
  0xAD75DB, 0xB072DC, 0xB26FDD, 0xB66BDF, 0xBB65E1, 0xBF60E3, 0xBF60E3, 0xC15DE4, 0xC05EE3, 0xC15EE4, 0xBF5FE3, 0xB967E0, 0xBA66E1, 0xC15EE3, 0xC35CE4, 0xC05FE3, 
  0xBF60E3, 0xBD61E2, 0xB868E0, 0xB967E1, 0xBF5FE3, 0xC15DE4, 0xC15EE4, 0xBE61E3, 0xBE62E2, 0xBB65E1, 0xBB65E1, 0xBC64E2, 0xB769DF, 0xB56CDE, 0xAE74DC, 0xAD75DB, 
  0xB072DC, 0xB46DDE, 0xB66BDF, 0xB968E0, 0xBD62E2, 0xBB65E1, 0xBE61E3, 0xC05FE3, 0xC15EE4, 0xC15DE4, 0xC25DE4, 0xC15DE4, 0xBC64E1, 0xB66ADF, 0xB868E0, 0xBC63E2
};*/

const long Landscape_02[] PROGMEM = 
{
  0x35F8A7, 0x4BE0B0, 0x43E9AD, 0x49E3B0, 0x4FDCB2, 0x4AE2AF, 0x47E5AF, 0x57D4B5, 0x4EDDB2, 0x43E9AC, 0x4AE2B0, 0x53D9B3, 0x4CDFB1, 0x51DAB3, 0x4DDEB1, 0x34F9A6, 
  0x6BBEBE, 0x7AAEC5, 0x81A6C8, 0x7AADC5, 0x77B1C4, 0x71B7C1, 0x64C5BB, 0x76B3C3, 0x8E98CD, 0x74B4C2, 0x70B9C0, 0x7CACC5, 0x7DAAC6, 0x76B2C3, 0x74B5C2, 0x66C4BC, 
  0x74B4C2, 0x6CBDBF, 0x6CBDBF, 0x6ABFBE, 0x79AFC4, 0x82A5C9, 0x8E98CD, 0x8F97CE, 0x8B9BCC, 0x8B9BCC, 0x7FA9C7, 0x70B9C0, 0x71B7C1, 0x6FBAC0, 0x70B9C0, 0x7CABC6, 
  0x67C2BD, 0x6CBDBF, 0x6CBDBF, 0x6FBAC0, 0x7DABC6, 0x889FCB, 0x8C9ACC, 0x85A2C9, 0x7CABC5, 0x83A4C8, 0x7CABC6, 0x7BADC6, 0x85A2C9, 0x71B7C1, 0x67C2BD, 0x68C1BD, 
  0x7DABC6, 0x7CABC6, 0x9195CF, 0xA282D6, 0x978FD1, 0x85A1C9, 0x77B0C4, 0x7BACC5, 0x84A3C9, 0x81A7C8, 0x85A2C9, 0x889FCB, 0x8B9CCC, 0x988CD2, 0x968FD1, 0x879FCA, 
  0xAC76DB, 0xA979D9, 0xAA78DA, 0xA97AD9, 0x9F84D5, 0x9095CE, 0x879FCA, 0x889FCB, 0x8D99CD, 0x8D98CD, 0x9492D0, 0x9B89D3, 0x988DD2, 0x988CD2, 0x9D86D4, 0xA083D5, 
  0xAD75DB, 0xA87BD9, 0xA084D5, 0x9F85D5, 0xA87AD9, 0xA381D7, 0x9E86D4, 0x998BD2, 0x998CD2, 0x9D87D3, 0xA87AD9, 0xAC76DA, 0xAA78DA, 0xA77CD9, 0xA57DD8, 0xA77CD8, 
  0xA87AD9, 0xA47ED7, 0xA67CD8, 0xAF73DC, 0xAF73DC, 0xA87AD9, 0xA87BD9, 0xAB77DA, 0xAB79DA, 0xAB77DA, 0xAD74DB, 0xAA78DA, 0xAA79DA, 0xA87AD9, 0xAE73DB, 0xB072DC, 
  0xAC76DA, 0xAC76DB, 0xAF72DC, 0xB66BDF, 0xAF72DC, 0xB968E0, 0xB868E0, 0xB56DDE, 0xAE73DC, 0xAE74DB, 0xAC76DA, 0xA77CD8, 0xA97AD9, 0xA979D9, 0xAB77DA, 0xB170DD, 
  0xAD75DB, 0xAD75DB, 0xAE74DB, 0xA77BD8, 0xAA79D9, 0xAE75DB, 0xB16FDD, 0xBB64E1, 0xB966E0, 0xBD63E2, 0xC25CE5, 0xBA66E1, 0xB270DD, 0xB36EDD, 0xB072DC, 0xAA79D9, 
  0xB270DD, 0xB46EDE, 0xAF73DC, 0xB868E0, 0xC05FE4, 0xC05FE4, 0xC05FE3, 0xBE61E3, 0xC15EE4, 0xBC64E1, 0xB171DC, 0xB270DD, 0xB170DD, 0xB072DC, 0xB270DD, 0xAD76DB, 
  0xAE74DB, 0xAF72DC, 0xB36EDE, 0xB869E0, 0xB56CDE, 0xB967E0, 0xBF5FE3, 0xBE61E3, 0xC05FE3, 0xBF60E3, 0xC05FE4, 0xC35BE5, 0xBF61E3, 0xB56CDF, 0xAB77DA, 0xB36EDE, 
  0xAA78DA, 0xB46DDE, 0xBD63E2, 0xC05FE4, 0xC25CE4, 0xBE61E3, 0xC05FE3, 0xC35CE4, 0xBE61E3, 0xBF60E3, 0xBB65E1, 0xB66BDF, 0xB46DDE, 0xB76ADF, 0xAA78DA, 0xA979DA, 
  0xA77CD8, 0xB072DC, 0xB36EDE, 0xB56CDF, 0xB967E0, 0xBD63E2, 0xBB65E2, 0xBE62E2, 0xC25CE4, 0xC15DE4, 0xBF60E3, 0xBF60E3, 0xC25DE4, 0xBD62E2, 0xBE62E2, 0xB56DDE, 
  0xBA66E1, 0xBB65E2, 0xC15EE4, 0xC15EE4, 0xBE62E3, 0xC05EE4, 0xC35CE4, 0xC15EE3, 0xC05FE3, 0xBE61E3, 0xC15EE4, 0xBA66E0, 0xB769DF, 0xB26FDD, 0xAF73DC, 0xB071DC, 
  0xAD74DB, 0xAF72DC, 0xB66BDF, 0xB868E0, 0xBC63E2, 0xBE61E3, 0xC05FE3, 0xC25CE4, 0xC15DE4, 0xC25DE4, 0xC05FE3, 0xBD63E2, 0xBE61E3, 0xC25CE4, 0xBF60E3, 0xB967E0
};

/*const long Landscape_03[] PROGMEM = 
{
  0x38F5A9, 0x3FEDAB, 0x3AF3A9, 0x3BF1AA, 0x45E7AE, 0x45E7AE, 0x43E9AD, 0x49E3AF, 0x4BE1B0, 0x4EDDB2, 0x4DDFB1, 0x43E9AD, 0x3FEDAC, 0x3EEEAB, 0x35F9A6, 0x2DFFA4, 
  0x5BD0B7, 0x68C1BD, 0x74B4C2, 0x75B3C2, 0x75B3C3, 0x74B5C2, 0x6EBBC0, 0x69C0BD, 0x6EBBBF, 0x71B7C1, 0x72B6C2, 0x6EBBBF, 0x6CBDBF, 0x6EBCC0, 0x6FBAC0, 0x61C9BA, 
  0x68C1BD, 0x67C2BD, 0x6DBCBF, 0x77B1C3, 0x71B7C1, 0x6FBAC0, 0x7BACC5, 0x8F96CE, 0x86A1C9, 0x73B5C2, 0x71B7C1, 0x6CBDBF, 0x64C6BB, 0x67C3BD, 0x6BBEBF, 0x6FBAC0, 
  0x7FA8C7, 0x7FA8C7, 0x8A9CCC, 0x85A2C9, 0x80A7C8, 0x83A4C8, 0x81A7C7, 0x78B0C3, 0x75B3C2, 0x79AFC4, 0x82A5C8, 0x9096CE, 0x9A8AD3, 0x9096CE, 0x83A4C8, 0x7DAAC6, 
  0x998CD2, 0x998BD2, 0x9D87D4, 0x9F85D5, 0x9F84D5, 0x9D87D4, 0x9194CF, 0x899DCB, 0x889ECB, 0x9096CE, 0x9E86D4, 0xA87AD9, 0xAE75DB, 0xB170DD, 0xB071DD, 0xA47FD7, 
  0xA47ED7, 0xA380D6, 0xA182D6, 0xA183D5, 0xA380D7, 0xA47FD7, 0xA380D7, 0xA480D7, 0xA380D7, 0xA380D7, 0xA380D7, 0xA281D6, 0x9F84D5, 0x9F84D5, 0x9D86D3, 0x9C88D3, 
  0xA47ED7, 0xA67CD8, 0xA87BD9, 0xA979D9, 0xAC76DA, 0xA979D9, 0xA67CD8, 0xA281D6, 0xA87BD9, 0xA97AD9, 0xA47ED8, 0xA67CD8, 0xA67CD8, 0xA77CD8, 0xA183D5, 0xA67DD8, 
  0xA47FD7, 0xA77CD8, 0xA281D6, 0xA67DD8, 0xAD75DB, 0xA87AD9, 0xAA79DA, 0xB071DC, 0xAE73DC, 0xAD75DB, 0xAD75DB, 0xAD75DB, 0xA77BD9, 0xA87AD9, 0xAF73DC, 0xAF73DB, 
  0xAA78DA, 0xAD76DB, 0xA979D9, 0xA380D7, 0xA67DD8, 0xAB77DA, 0xB46EDE, 0xBB66E1, 0xB36EDD, 0xAB77DA, 0xA57ED8, 0xAA77DA, 0xAE74DC, 0xA57ED7, 0xA77CD9, 0xA67DD8, 
  0xAA79DA, 0xA87AD9, 0xA67DD8, 0xA47ED7, 0xA57ED7, 0xB171DD, 0xB868E0, 0xB171DD, 0xB56CDE, 0xB46EDE, 0xB171DC, 0xB36EDE, 0xAC76DB, 0xA381D6, 0xA97AD9, 0xAE74DB, 
  0xA47FD7, 0xAB77DA, 0xB270DD, 0xB868E0, 0xB36EDE, 0xB36FDD, 0xB171DD, 0xAA79D9, 0xB072DC, 0xB36EDE, 0xB56CDE, 0xB072DC, 0xAC76DB, 0xAB77DA, 0xAA79D9, 0xAC76DB, 
  0xA979DA, 0xA77CD8, 0xAE74DB, 0xAC76DB, 0xB170DD, 0xB56CDE, 0xAD74DB, 0xB36EDD, 0xB869E0, 0xAC75DB, 0xB072DC, 0xB46DDE, 0xB56CDE, 0xB66BDF, 0xB26FDD, 0xA97AD9, 
  0xB170DD, 0xB071DC, 0xB171DD, 0xB170DD, 0xB76ADF, 0xB967E0, 0xBE62E2, 0xC05FE4, 0xBE62E2, 0xB66BDF, 0xB66BDF, 0xB967E0, 0xB072DC, 0xA979D9, 0xAA78DA, 0xA57ED7, 
  0xA57ED7, 0xA67CD8, 0xAC76DA, 0xBB65E1, 0xB868DF, 0xB76ADF, 0xBC64E2, 0xBF60E3, 0xBE61E3, 0xC05EE4, 0xBC64E2, 0xBA66E1, 0xB76ADF, 0xB170DD, 0xAF72DC, 0xAF72DC, 
  0xAD75DB, 0xB36FDD, 0xB66BDE, 0xB869E0, 0xB967E0, 0xBE62E3, 0xBE60E3, 0xBE60E3, 0xBF60E3, 0xBD62E2, 0xBB66E1, 0xB769DF, 0xBA66E0, 0xB968E0, 0xA77BD8, 0xA084D5, 
  0xAD76DB, 0xB46DDE, 0xB967E0, 0xB46DDE, 0xB76ADF, 0xBC65E1, 0xBE61E3, 0xBE61E3, 0xBE62E3, 0xBE62E3, 0xBF60E3, 0xBB64E1, 0xB66BDF, 0xB46EDE, 0xB66BDF, 0xB36EDD
};*/

const long Landscape_04[] PROGMEM = 
{
  0x39F4A9, 0x3CF1AA, 0x37F7A8, 0x3AF3A9, 0x40ECAC, 0x43E9AD, 0x47E6AE, 0x4AE3AF, 0x4DDFB1, 0x4FDDB2, 0x45E7AE, 0x3AF3A9, 0x3BF2AA, 0x3DF0AA, 0x36F7A7, 0x31FDA5, 
  0x59D2B6, 0x5DCDB8, 0x69C0BD, 0x6DBDBF, 0x6BBEBF, 0x70B9C1, 0x70B8C1, 0x67C2BC, 0x69C0BD, 0x6FBAC0, 0x6BBEBE, 0x62C8BA, 0x60CAB9, 0x61CABA, 0x62C8BA, 0x5DCDB8, 
  0x6CBDBE, 0x77B0C4, 0x7DAAC7, 0x81A5C8, 0x81A5C8, 0x76B1C4, 0x70B8C1, 0x7DABC6, 0x7AADC5, 0x69C0BE, 0x6EBBC0, 0x6FBAC0, 0x62C7BB, 0x69C0BE, 0x71B7C2, 0x75B3C3, 
  0x8A9BCC, 0x8B9BCC, 0x8E97CD, 0x84A2C9, 0x8D99CD, 0x9392CF, 0x81A6C7, 0x7FA8C7, 0x85A2C9, 0x85A1CA, 0x9293CF, 0x9B8AD3, 0xA282D6, 0x9C87D4, 0x9491D0, 0x8B9BCC, 
  0x9392CF, 0x9393CF, 0x9C88D3, 0x9E86D4, 0x988DD2, 0x998BD2, 0x9B8AD3, 0x9E85D5, 0x998BD2, 0x9F84D5, 0xA67CD8, 0xAA78DA, 0xB26FDD, 0xB071DC, 0xA77CD8, 0x9F85D5, 
  0xA57ED8, 0xAA78DA, 0xA57ED8, 0xA281D6, 0xA182D6, 0xA083D5, 0xA381D6, 0xA281D6, 0x9F85D4, 0xA281D6, 0xA67CD9, 0xA77CD9, 0x9B8AD3, 0x998BD2, 0x9F85D5, 0x9C87D4, 
  0x9D86D5, 0x9E85D5, 0xA47ED7, 0xA57DD8, 0xA67CD8, 0xA87BD9, 0xA979D9, 0xA67DD8, 0xA77CD8, 0xA47FD7, 0x9F84D5, 0xA380D6, 0xA281D6, 0xA183D5, 0xA084D5, 0xA380D7, 
  0xA47ED7, 0x9F85D5, 0xA380D6, 0xA182D6, 0xA77BD8, 0xAA79D9, 0xAC76DB, 0xAE74DC, 0xA77CD8, 0xA380D7, 0xAA78DA, 0xAD75DB, 0xAB77DA, 0xAD74DB, 0xA97AD9, 0xA57ED7, 
  0xAC76DA, 0xAF73DC, 0xA87AD9, 0xA87BD9, 0xAA78DA, 0xAD75DB, 0xAF72DC, 0xB171DD, 0xB36EDE, 0xAD75DB, 0xA87AD9, 0xAD75DB, 0xA77CD8, 0xA182D6, 0xA57ED8, 0xA183D6, 
  0xA47ED7, 0xA97AD9, 0xA57ED7, 0xAC75DB, 0xA67DD8, 0xA67CD8, 0xAE74DB, 0xB46CDE, 0xB869E0, 0xB66BDF, 0xAE75DB, 0xA67ED8, 0xA37FD7, 0xA979DA, 0xAA78DA, 0xA979D9, 
  0xAA78DA, 0xA97AD9, 0xA37FD7, 0xA57ED7, 0xAD76DA, 0xAF73DC, 0xB56DDE, 0xB869DF, 0xB170DC, 0xB66BDF, 0xB072DC, 0xA979D9, 0xA47FD7, 0xA380D7, 0xA67DD8, 0xA979D9, 
  0xA97AD9, 0xA67CD8, 0xAA78DA, 0xAE74DB, 0xB26FDE, 0xB869DF, 0xB76ADF, 0xB170DD, 0xB071DC, 0xB36EDE, 0xB56CDF, 0xB967E0, 0xB46DDE, 0xA87BD8, 0xA380D7, 0xA57DD8, 
  0xA182D6, 0xAF73DC, 0xB66CDF, 0xB66BDF, 0xB26FDD, 0xB26FDD, 0xB170DD, 0xAD75DB, 0xB46EDE, 0xB171DC, 0xB36EDE, 0xB172DC, 0xAB77DA, 0xAD75DB, 0xA57ED7, 0xA77CD8, 
  0xA182D6, 0xA67DD8, 0xA87AD9, 0xAE74DC, 0xB76ADF, 0xB66CDF, 0xB36FDD, 0xB46DDE, 0xB968E0, 0xAF73DC, 0xB36EDE, 0xB56CDF, 0xB56DDE, 0xB26FDD, 0xB36EDE, 0xAE74DB, 
  0xB072DC, 0xB072DC, 0xB171DC, 0xB26FDD, 0xB56CDF, 0xB76ADF, 0xB868E0, 0xBF61E3, 0xBC64E2, 0xB66BDF, 0xB66BDF, 0xBA67E0, 0xBB65E1, 0xAD74DB, 0xA77CD9, 0x9F85D5, 
  0xAB76DA, 0xAD74DB, 0xB868E0, 0xB967E0, 0xB76ADF, 0xB769DF, 0xBB65E1, 0xBD62E2, 0xBC63E2, 0xBE61E3, 0xB968E0, 0xB769E0, 0xB16FDD, 0xB170DC, 0xAF74DC, 0xB072DC
};

/*const long Landscape_05[] PROGMEM = 
{
  0x3AF3A9, 0x38F6A8, 0x31FDA5, 0x30FEA5, 0x34F8A7, 0x46E5AF, 0x53D8B4, 0x50DCB2, 0x52DAB3, 0x44E8AD, 0x37F7A8, 0x3FEEAB, 0x47E5AF, 0x4AE2B0, 0x3BF2AA, 0x32FCA6, 
  0x61C9B9, 0x58D4B5, 0x5ECDB8, 0x60CABA, 0x5ECDB8, 0x5FCBB9, 0x6AC0BD, 0x66C3BC, 0x60C9BA, 0x65C5BC, 0x70B9C0, 0x79AFC4, 0x70BAC0, 0x65C5BC, 0x61C9B9, 0x5CCFB7, 
  0x78B0C3, 0x85A1CA, 0x9591D0, 0x978ED1, 0x998BD3, 0x9195CF, 0x7EA9C6, 0x76B1C4, 0x6ABFBE, 0x69C0BD, 0x7FA7C7, 0x77B1C3, 0x6BBEBE, 0x73B5C2, 0x7EAAC6, 0x899DCB, 
  0x8A9CCC, 0x8C99CD, 0x9194CF, 0x9491D0, 0x9D86D4, 0xA083D6, 0x9293D0, 0x9292CF, 0x9A8AD3, 0x9B89D3, 0x9590D1, 0x9195CF, 0x988CD2, 0x968FD1, 0x9490D1, 0x9096CE, 
  0x8C9ACD, 0x8B9BCC, 0x9590D0, 0xA083D6, 0x978ED1, 0x9491D0, 0x9A8AD2, 0x9D86D4, 0xA182D6, 0xA380D7, 0x9E86D4, 0xA182D6, 0xA282D6, 0x9C88D3, 0x9491D0, 0x9491D0, 
  0xA084D5, 0xA183D5, 0xA380D6, 0xA57ED7, 0xA380D7, 0xA182D6, 0xA083D5, 0x9E86D4, 0x9E85D4, 0x998BD2, 0x978DD1, 0x9B89D3, 0x9E85D4, 0x9A89D3, 0x9491D0, 0x8C9ACD, 
  0x998BD2, 0x988CD2, 0x968FD1, 0x978DD2, 0xA47FD7, 0xAC75DB, 0xA380D7, 0x9E86D4, 0xA37FD6, 0xA182D6, 0x9B89D3, 0x9F84D5, 0xA57ED7, 0xA77BD8, 0xA280D6, 0xA083D5, 
  0x9E85D5, 0xA182D6, 0x9E85D4, 0x9B89D3, 0x9B89D3, 0x9B8AD3, 0x9F84D5, 0xA281D6, 0xA67DD8, 0xAA79D9, 0xA97AD9, 0xAA78DA, 0xA380D7, 0xA183D5, 0x9E86D4, 0x968ED1, 
  0x9F85D4, 0xA57ED8, 0xA77BD9, 0xAD75DB, 0xA380D7, 0xA281D6, 0xA47FD7, 0xAA79D9, 0xAC76DB, 0xA87BD9, 0xA87AD9, 0xA380D6, 0x998BD2, 0x988CD2, 0x978DD2, 0x9D87D4, 
  0x998BD2, 0x9B89D3, 0x9D87D4, 0xA182D6, 0xA979D9, 0xAC76DB, 0xB170DD, 0xB170DD, 0xA57ED7, 0xA083D5, 0xAA78DA, 0xAA78DA, 0xA67CD8, 0xA979DA, 0xA380D6, 0xA380D6, 
  0xA380D6, 0xAB78D9, 0xA67DD8, 0xA281D7, 0xA380D6, 0xAA78DA, 0xAD75DB, 0xAF72DC, 0xB170DC, 0xAD75DB, 0xA380D7, 0xA87BD9, 0xAA78DA, 0xA182D6, 0xA57DD8, 0xA182D6, 
  0xA67DD7, 0xA281D6, 0x9E85D5, 0xA67DD8, 0xA77BD8, 0xAB76DA, 0xAC75DB, 0xB072DC, 0xB46DDE, 0xB56CDE, 0xAF73DC, 0xA57DD8, 0xA182D6, 0xA380D7, 0xA67DD8, 0xA47FD7, 
  0xA083D5, 0x9D87D4, 0xA084D5, 0xA67DD8, 0xAB78DA, 0xAB77DA, 0xB171DD, 0xB46DDE, 0xB072DC, 0xB072DC, 0xB071DD, 0xB171DC, 0xAE74DB, 0xAC77DA, 0x9F84D5, 0xA183D6, 
  0x9F85D5, 0xA380D7, 0xAB77DA, 0xAE74DB, 0xB26FDD, 0xB46EDD, 0xB56DDE, 0xAD75DB, 0xB072DC, 0xB071DD, 0xB170DC, 0xB26FDD, 0xAF72DC, 0xA67CD8, 0x9F84D5, 0x9A8AD3, 
  0xA67DD8, 0xB170DD, 0xB270DD, 0xB171DD, 0xB66BDE, 0xB36EDE, 0xAF73DC, 0xAB77DA, 0xB072DC, 0xAF72DC, 0xB270DD, 0xAE74DC, 0xAA79DA, 0xA979D9, 0xAC76DB, 0xAF73DC, 
  0xB46DDE, 0xB171DD, 0xB46DDE, 0xB66CDE, 0xB56CDE, 0xAF72DC, 0xAD75DB, 0xB36EDD, 0xB171DC, 0xAE74DB, 0xAE73DC, 0xB071DC, 0xB36FDD, 0xB171DC, 0xB170DD, 0xAE74DC
};*/

const long Landscape_06[] PROGMEM = 
{
  0x3CF1AB, 0x35F9A7, 0x30FEA5, 0x33FAA7, 0x3DF0AA, 0x47E5AF, 0x56D5B5, 0x53D9B4, 0x51DBB3, 0x41ECAC, 0x38F6A8, 0x44E9AD, 0x50DBB3, 0x4DDFB1, 0x39F3A9, 0x30FEA5, 
  0x6FBBBF, 0x62C9BA, 0x60CBB9, 0x5DCEB8, 0x5BD0B6, 0x5BCFB7, 0x62C8BB, 0x5FCBB9, 0x5ECCB9, 0x6DBCBF, 0x7CACC5, 0x8C9ACC, 0x7EAAC6, 0x6FB9C0, 0x62C8BA, 0x5BCFB7, 
  0x7BADC5, 0x87A0CA, 0x9393CF, 0x9492D0, 0x988CD2, 0x9C88D4, 0x8E98CD, 0x7FA8C7, 0x71B7C1, 0x72B7C1, 0x82A4C8, 0x7DABC6, 0x73B6C1, 0x7DAAC6, 0x899ECB, 0x8F97CD, 
  0x83A3C9, 0x8B9BCC, 0x8D99CD, 0x9095CF, 0x9B89D4, 0xA37FD7, 0x9B89D3, 0x9C87D4, 0xA083D6, 0x9590D0, 0x8E97CE, 0x8D99CD, 0x9293D0, 0x9194CF, 0x8F97CD, 0x899DCB, 
  0x8C9ACD, 0x8C9ACD, 0x9293CF, 0x9B89D3, 0x9590D0, 0x9293CF, 0x9B89D3, 0x9C88D3, 0x9E85D4, 0x9D86D4, 0x9D86D4, 0xA084D5, 0x9D87D4, 0x9194CF, 0x8B9CCC, 0x8E98CE, 
  0x998CD2, 0x9F85D5, 0xA083D5, 0xA084D4, 0x9D86D4, 0x9D87D4, 0xA083D5, 0x9D87D4, 0x9D87D4, 0x978ED1, 0x9392D0, 0x998BD2, 0x9F85D5, 0x978ED1, 0x86A0CA, 0x86A1CA, 
  0x9095CE, 0x998CD2, 0x968FD1, 0x998BD2, 0x9F84D5, 0x9F85D5, 0x9C88D3, 0x9C88D4, 0x9E86D4, 0x9D87D4, 0x9C88D4, 0xA182D6, 0xA380D7, 0x9F84D5, 0x9E85D4, 0x9F84D5, 
  0x9B88D3, 0xA083D5, 0xA281D6, 0x9E85D5, 0x9A8AD3, 0x978ED1, 0x9F84D5, 0xA380D6, 0x9F84D5, 0xA67CD8, 0xB072DC, 0xA87BD9, 0x9D87D4, 0x9B88D3, 0x968FD1, 0x968ED1, 
  0x9590D0, 0xA281D5, 0xA47ED7, 0xA67CD8, 0xA57ED7, 0xA281D7, 0xA67CD8, 0xA77CD9, 0xA381D6, 0x9F84D5, 0xA084D5, 0x998BD3, 0x9392D0, 0x978ED1, 0x988CD2, 0x978ED2, 
  0x978DD2, 0x978DD1, 0x998BD2, 0x9C88D3, 0xA77BD8, 0xAD75DB, 0xAC76DA, 0xAD75DB, 0xA77CD8, 0xA084D5, 0x9F83D5, 0xA380D6, 0xAB77DA, 0xA57ED7, 0xA380D6, 0xA084D5, 
  0xA083D5, 0xA380D7, 0xA77CD8, 0x9F85D5, 0xA57FD7, 0xA87AD9, 0xA380D6, 0xA47ED7, 0xAF72DC, 0xB071DD, 0xA57ED7, 0xA87AD9, 0xA87AD9, 0x9F84D5, 0xA47FD7, 0xA280D6, 
  0xA183D5, 0x9F84D5, 0x9D86D4, 0xA87BD9, 0xA57DD8, 0xA47FD7, 0xAA78DA, 0xAE74DC, 0xAE73DC, 0xAF73DC, 0xAD75DB, 0xA182D6, 0x9D87D4, 0xA083D5, 0xA77CD8, 0xA182D5, 
  0x9A89D2, 0x988CD2, 0x9D87D4, 0xA281D6, 0xA979D9, 0xAC76DB, 0xB26FDD, 0xB36EDD, 0xAD75DB, 0xA979D9, 0xAE73DC, 0xAE74DB, 0xAE74DC, 0xAE73DC, 0x9F85D5, 0x9F85D4, 
  0xB170DD, 0xA979D9, 0xA87AD9, 0xAC76DB, 0xB36FDD, 0xAF72DC, 0xAF72DC, 0xAB77DA, 0xB071DC, 0xAD75DB, 0xA87AD9, 0xAC76DB, 0xAD75DB, 0xA47FD7, 0x9F85D5, 0x978ED1, 
  0xAC76DA, 0xB26FDD, 0xB170DD, 0xAE73DC, 0xB56CDE, 0xB46DDE, 0xAD75DB, 0xA97AD9, 0xAB78DA, 0xB171DC, 0xB071DC, 0xAB78DA, 0xA87AD9, 0xAC76DA, 0xB26FDD, 0xB66BDE, 
  0xAE74DB, 0xAD75DB, 0xB56DDE, 0xB66BDF, 0xB26FDD, 0xAC77DA, 0xA97AD9, 0xB171DD, 0xAB78DA, 0xAC77DA, 0xAE74DC, 0xB170DC, 0xB170DD, 0xB170DD, 0xAF73DC, 0xAB77DA
};

/*const long Landscape_07[] PROGMEM = 
{
  0x43E9AD, 0x39F4A9, 0x35F9A7, 0x3AF3A9, 0x41EBAC, 0x52D9B3, 0x5BD0B7, 0x52D9B3, 0x4DDFB1, 0x41EBAC, 0x3BF2A9, 0x46E7AE, 0x4EDEB1, 0x4FDDB2, 0x40EDAB, 0x3BF2A9, 
  0x7CACC5, 0x70B8C0, 0x73B6C1, 0x69C1BD, 0x61C9BA, 0x65C5BB, 0x64C6BB, 0x6AC0BE, 0x72B7C1, 0x86A0CA, 0x9194CF, 0x9491D0, 0x83A4C9, 0x70B9C0, 0x67C2BC, 0x61C9BA, 
  0x79AEC5, 0x85A1C9, 0x9392D0, 0x9392D0, 0x9490D0, 0x9590D0, 0x968FD1, 0x9393D0, 0x8E98CD, 0x899DCB, 0x9393CF, 0x84A2C9, 0x80A7C7, 0x85A2C9, 0x83A3C9, 0x8A9CCC, 
  0x7CABC6, 0x83A4C8, 0x83A3C9, 0x8A9CCC, 0x958FD1, 0x9491D0, 0x9590D0, 0x9491D0, 0x8E97CE, 0x889FCB, 0x9095CE, 0x8A9CCC, 0x81A6C7, 0x82A5C8, 0x84A3C9, 0x82A5C8, 
  0x7FA9C7, 0x83A4C9, 0x85A2C9, 0x899DCB, 0x87A0CA, 0x889FCA, 0x9392D0, 0x9E86D4, 0x9B89D3, 0x9C88D4, 0x9B89D3, 0x8E98CD, 0x8E98CD, 0x8B9CCC, 0x86A1CA, 0x7FA8C7, 
  0x8F96CE, 0x9293D0, 0x9294CF, 0x968FD1, 0x9C87D4, 0x9E86D4, 0x978ED1, 0x988CD2, 0x978ED1, 0x968FD1, 0x9096CE, 0x978ED1, 0x9F85D5, 0x9096CE, 0x86A1CA, 0x84A3C9, 
  0x82A5C8, 0x86A0CA, 0x9393CF, 0x9B8AD3, 0x998BD2, 0x8F96CE, 0x9194CF, 0x968ED1, 0x988DD2, 0x988CD2, 0x9590D1, 0x9B88D3, 0x9D87D4, 0x9B89D3, 0x998CD2, 0x9293D0, 
  0x9393D0, 0x9590D0, 0x988DD2, 0x968FD1, 0x9392D0, 0x9294CF, 0x988DD2, 0x998BD2, 0x998AD2, 0x9A8AD3, 0x9F84D5, 0xA480D6, 0x9D88D3, 0x978ED1, 0x9195CF, 0x8E98CD, 
  0x958FD1, 0x9E85D4, 0xA37FD7, 0x9F84D5, 0xA47FD7, 0xAC76DA, 0xA57ED7, 0x9E86D4, 0x9F85D5, 0x978ED1, 0x988DD2, 0x9A8AD3, 0x9590D0, 0x968FD1, 0x978DD1, 0x968FD1, 
  0xA281D6, 0xA380D7, 0xA083D5, 0xA380D7, 0xA77CD8, 0xAA78DA, 0xA281D6, 0xA380D7, 0xA380D7, 0x9D87D4, 0x9B89D3, 0x9F85D5, 0xA380D7, 0xA083D5, 0xA281D6, 0x9F84D5, 
  0x988CD2, 0x988DD2, 0x9A8AD3, 0x998CD2, 0x9D87D4, 0xA083D5, 0x9C88D4, 0x9F84D5, 0xAA77DA, 0xAF72DC, 0xA47FD7, 0xA67DD8, 0xAB77DA, 0xA57ED8, 0x9E86D4, 0xAA79DA, 
  0xB967E0, 0xAF73DC, 0xAB77DA, 0xAC75DB, 0xAE74DB, 0xA47FD7, 0xA480D7, 0xA97AD9, 0xA57ED8, 0xAB77DA, 0xAE74DB, 0xA47FD7, 0x9B89D3, 0x988DD2, 0x9F84D5, 0xA47FD7, 
  0xAB77DA, 0xB26FDD, 0xAD75DB, 0xAC76DA, 0xAB77DA, 0xA57DD8, 0xAE74DB, 0xB071DD, 0xA480D7, 0xA281D6, 0xAD74DB, 0xAD76DB, 0xA57ED7, 0xAE73DB, 0xB66BDF, 0xB56BDE, 
  0xAF73DB, 0xAB77DA, 0xB171DC, 0xB071DD, 0xAB77DA, 0xA979D9, 0xA77CD8, 0xA67ED8, 0xA47FD7, 0xA47FD7, 0xAB77DA, 0xB36EDE, 0xAE74DB, 0xAD75DB, 0xA67DD8, 0x9E85D5, 
  0xAD75DB, 0xA67DD8, 0xA084D5, 0xAA79D9, 0xAD75DB, 0xAA79DA, 0xA57ED7, 0xA97AD9, 0xA979D9, 0xA979D9, 0xAB77DA, 0xAB77DA, 0xB072DC, 0xB071DC, 0xB270DD, 0xB26FDD, 
  0xB170DD, 0xB36EDD, 0xB071DC, 0xA87AD9, 0xA67DD8, 0xAA78D9, 0xB072DC, 0xAD75DB, 0xB46EDE, 0xAF72DC, 0xAD75DB, 0xAC76DB, 0xB66ADF, 0xB967E0, 0xBA66E1, 0xB56CDF
};*/

/*const long Landscape_08[] PROGMEM = 
{
  0x47E5AF, 0x3DF0AA, 0x36F7A7, 0x3FEEAB, 0x43E9AD, 0x4EDEB1, 0x60CBB9, 0x57D5B5, 0x4CE0B1, 0x43E9AD, 0x3DF0AA, 0x44E8AD, 0x4BE0B0, 0x50DCB2, 0x43E9AD, 0x3FEEAB, 
  0x7CACC5, 0x74B4C2, 0x79AFC4, 0x71B8C0, 0x66C3BC, 0x6BBEBE, 0x67C3BC, 0x6CBDBF, 0x7DAAC6, 0x8F96CE, 0x9590D0, 0x8D99CD, 0x7AAEC4, 0x6DBCBF, 0x6ABFBE, 0x66C4BC, 
  0x77B1C4, 0x7DABC6, 0x8C9ACC, 0x9096CE, 0x9491D0, 0x9392D0, 0x9491D0, 0x9590D0, 0x9294CF, 0x8C99CD, 0x9292D0, 0x84A2C9, 0x7FA8C7, 0x7FA8C7, 0x81A6C8, 0x889FCA, 
  0x7AADC5, 0x79AEC5, 0x7DAAC6, 0x82A4C8, 0x9492D0, 0x958FD1, 0x9193CF, 0x9096CE, 0x889ECB, 0x86A0CA, 0x8A9DCB, 0x85A2C9, 0x81A5C8, 0x83A5C8, 0x81A6C7, 0x7BACC5, 
  0x7BACC5, 0x7EA9C7, 0x7FA9C6, 0x7FA8C7, 0x83A4C8, 0x85A2C9, 0x8A9DCB, 0x968ED1, 0x978ED2, 0x968FD1, 0x9294CF, 0x8F96CE, 0x8B9ACC, 0x889FCA, 0x84A4C9, 0x77B1C3, 
  0x8C9ACC, 0x9294CF, 0x9096CE, 0x8F96CE, 0x9393D0, 0x9D87D4, 0x978ED1, 0x978ED1, 0x988CD2, 0x9392D0, 0x8B9BCC, 0x9590D0, 0x9C88D3, 0x8A9CCC, 0x80A7C7, 0x7DAAC6, 
  0x83A4C9, 0x86A1CA, 0x9294CF, 0x9B89D3, 0x9A8AD2, 0x8F97CE, 0x8F96CE, 0x8F96CE, 0x9293CF, 0x9392CF, 0x9392D0, 0x9B8AD3, 0x988CD2, 0x9492D0, 0x9095CF, 0x8D99CD, 
  0x968FD1, 0x9C88D3, 0x988CD2, 0x9293CF, 0x8E98CD, 0x8E97CE, 0x978DD1, 0x968ED1, 0x988DD1, 0x978DD1, 0x9F85D5, 0xA280D7, 0x9D87D4, 0x9C88D3, 0x9491D0, 0x8F96CE, 
  0x9A8AD2, 0xA281D6, 0xA281D6, 0x9D87D4, 0x9F85D5, 0xA77CD8, 0xA281D6, 0x9D87D4, 0x9C89D3, 0x9590D0, 0x9F85D5, 0xA281D6, 0xA182D6, 0xA182D6, 0xA281D6, 0xA67CD8, 
  0xAC76DA, 0xA083D5, 0xA57ED8, 0xAD74DB, 0xAA78DA, 0xA97AD9, 0xA77CD8, 0xA47FD7, 0x9F85D5, 0x998CD2, 0x9B89D4, 0x9D87D4, 0x9B89D3, 0x978ED1, 0x9B89D3, 0xA182D6, 
  0xAB77DA, 0xA67DD8, 0x9B8AD3, 0x9A8BD2, 0xA47FD7, 0xAC76DB, 0xA280D6, 0x9F85D5, 0xA979DA, 0xA87BD9, 0xA182D6, 0xAC76DB, 0xAC75DB, 0xAA78DA, 0xB26FDD, 0xB967E0, 
  0xB968E0, 0xB869E0, 0xB072DC, 0xA47FD7, 0xAB77DA, 0xA979D9, 0xA084D5, 0xA182D6, 0xA77BD9, 0xAA78DA, 0xA57ED8, 0xAC76DB, 0xB26FDD, 0xB56CDE, 0xB26FDD, 0xA87AD9, 
  0xBB65E1, 0xBE61E3, 0xC35BE5, 0xC15DE4, 0xB46EDE, 0xA97AD9, 0xA87AD9, 0xA87BD9, 0xA083D5, 0xA380D7, 0xA87BD9, 0xA77BD8, 0xB072DC, 0xB270DD, 0xAA78DA, 0xAD75DB, 
  0xB072DC, 0xB46DDE, 0xB072DC, 0xB072DC, 0xAD75DB, 0xAB77DA, 0xAF73DC, 0xAF73DB, 0xB36EDD, 0xB56CDE, 0xB869DF, 0xB46DDE, 0xB170DD, 0xB56CDE, 0xBA66E0, 0xBB65E1, 
  0xB36EDE, 0xB270DD, 0xB36EDD, 0xB56CDE, 0xC05FE3, 0xBE61E2, 0xB76ADF, 0xB46DDE, 0xB769E0, 0xB769E0, 0xB769E0, 0xB46DDE, 0xB36EDE, 0xAF72DC, 0xB270DD, 0xB170DD, 
  0xB26FDD, 0xB26FDD, 0xB66BDF, 0xB46DDE, 0xB868E0, 0xB76ADF, 0xB66BDF, 0xB868E0, 0xBE62E2, 0xBF5FE3, 0xBB64E1, 0xBB64E1, 0xBF61E3, 0xC05FE3, 0xBC64E1, 0xBB65E1
};*/

// ================================================================

void Brightness()
{
  // Getting the brightness from the potentiometer, mapping the value and clamping it before setting it.
  
  int bright = constrain(analogRead(BRIGHT_PIN) / 4, 0, 255);
  bright = map(bright, 0, 255, MIN_BRIGHT, MAX_BRIGHT);
  FastLED.setBrightness(bright);
}

// Function to display a single frame
void DisplayFrame(const long* frame, int delayTime = 0, bool checkLoop = false)
{
  do
  {
    Brightness();
  
    // Looping throw a frame to  display it
    for(int i = 0; i < NUM_LEDS; ++i)
    {
      leds[i] = pgm_read_dword(&(frame[i]));
    }

    // Actually display the led info when setted
    FastLED.show();

    if(delayTime > 0) FastLED.delay(delayTime);
    
  }while(checkLoop && !digitalRead(DYNAMIC_PIN));
}

/*void Display2FramesAnimation(const long* frame0, const long* frame1, int delayBetweenFrames = TIME_BETWEEN_FRAMES, bool checkLoop = true)
{
  do
  {
    DisplayFrame(frame0, delayBetweenFrames);
    DisplayFrame(frame1, delayBetweenFrames);
  }while(checkLoop && !digitalRead(DYNAMIC_PIN));
}*/

// ---------------------------------------------------------------------------
// Delays
#define UNICORN_FULL_DELAY 500
#define UNICORN_HEAD_DELAY 500
#define UNICORN_WHALE_DELAY 500
#define COLOR_GRADIENT_DELAY 500
#define HEART_DELAY 500
#define YING_YANG_DELAY 500
#define LANDSCAPE_DELAY 500

void UnicornFull()
{
  do
  {
    DisplayFrame(&UnicornFull_00[0], UNICORN_FULL_DELAY);
    DisplayFrame(&UnicornFull_01[0], UNICORN_FULL_DELAY);
  }while(!digitalRead(DYNAMIC_PIN));
}

void UnicornHead()
{
  do
  {
    DisplayFrame(&UnicornHead_00[0], UNICORN_HEAD_DELAY);
    DisplayFrame(&UnicornHead_01[0], UNICORN_HEAD_DELAY);
    DisplayFrame(&UnicornHead_02[0], UNICORN_HEAD_DELAY);
  }while(!digitalRead(DYNAMIC_PIN));
}

void UnicornWhale()
{
  do
  {
    DisplayFrame(&UnicornWhale_00[0], UNICORN_WHALE_DELAY);
    DisplayFrame(&UnicornWhale_01[0], UNICORN_WHALE_DELAY);
  }while(!digitalRead(DYNAMIC_PIN));
}

void ColorGradient()
{
  do
  {
    DisplayFrame(&ColorGradient_00[0], COLOR_GRADIENT_DELAY);
    DisplayFrame(&ColorGradient_01[0], COLOR_GRADIENT_DELAY);
    DisplayFrame(&ColorGradient_02[0], COLOR_GRADIENT_DELAY);
    DisplayFrame(&ColorGradient_03[0], COLOR_GRADIENT_DELAY);
    DisplayFrame(&ColorGradient_04[0], COLOR_GRADIENT_DELAY);
    DisplayFrame(&ColorGradient_05[0], COLOR_GRADIENT_DELAY);
    DisplayFrame(&ColorGradient_06[0], COLOR_GRADIENT_DELAY);
    DisplayFrame(&ColorGradient_07[0], COLOR_GRADIENT_DELAY);
  }while(!digitalRead(DYNAMIC_PIN));
}

void Heart()
{
  do
  {
    DisplayFrame(&Heart_00[0], HEART_DELAY);
    DisplayFrame(&Heart_01[0], HEART_DELAY);
    DisplayFrame(&Heart_02[0], HEART_DELAY);
    DisplayFrame(&Heart_03[0], HEART_DELAY);
  }while(!digitalRead(DYNAMIC_PIN));
}

void YingYang()
{
  do
  {
    DisplayFrame(&YingYang_00[0], YING_YANG_DELAY);
    DisplayFrame(&YingYang_01[0], YING_YANG_DELAY);
  }while(!digitalRead(DYNAMIC_PIN));
}

void Landscape()
{
  do
  {
    DisplayFrame(&Landscape_00[0], LANDSCAPE_DELAY);
    //DisplayFrame(&Landscape_01[0], LANDSCAPE_DELAY);
    DisplayFrame(&Landscape_02[0], LANDSCAPE_DELAY);
    //DisplayFrame(&Landscape_03[0], LANDSCAPE_DELAY);
    DisplayFrame(&Landscape_04[0], LANDSCAPE_DELAY);
    //DisplayFrame(&Landscape_05[0], LANDSCAPE_DELAY);
    DisplayFrame(&Landscape_06[0], LANDSCAPE_DELAY);
    //DisplayFrame(&Landscape_07[0], LANDSCAPE_DELAY);
    //DisplayFrame(&Landscape_08[0], LANDSCAPE_DELAY);
  }while(!digitalRead(DYNAMIC_PIN));
}

// ----------------------------------------------------------------------------

void setup() 
{
  // Init the LEDs
  FastLED.addLeds<NEOPIXEL, DATA_PIN>(leds, NUM_LEDS);

  pinMode(DYNAMIC_PIN, INPUT);
  pinMode(BRIGHT_PIN, INPUT);
  
  // Setting the LEDs brightness
  Brightness();
}

void loop() 
{
  UnicornFull();
  UnicornHead();
  UnicornWhale();
  ColorGradient();
  Landscape();
  YingYang();
  Heart();
}
